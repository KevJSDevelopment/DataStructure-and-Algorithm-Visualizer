{"version":3,"sources":["Navbar.js","components/ArrayCircle.js","containers/MultiplePointers.js","components/ArrayBar.js","helperMethods/MergeSort.js","helperMethods/HelperMethods.js","containers/MergeSort.js","containers/QuickSort.js","containers/BubbleSort.js","helperMethods/DataStructureClasses.js","containers/SingleLinkedList.js","helperMethods/BinarySearchAnimations.js","containers/BinaryTree.js","containers/BinaryHeap.js","components/HashBox.js","helperMethods/HashMapAnimations.js","containers/HashMap.js","components/Node.js","components/NodeRow.js","containers/Dijkstras.js","Algorithms.js","App.js","index.js"],"names":["Navbar","className","id","to","ArrayCircle","props","index","style","width","value","height","textAlign","MultiplePointers","useState","testArray","setTestArray","rows","setRows","randomInt","min","max","Math","floor","random","findSum","total","left","right","length","oldTarget1","oldTarget2","sum","backgroundColor","target1","document","getElementById","target2","parseInt","answer1","answer2","setTimeout","useEffect","array","i","push","rowNum","resetArray","onSubmit","event","preventDefault","target","type","placeholder","map","ArrayBar","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","doMerge","k","j","MergeSort","mergeSort","slice","getMergeSortAnimations","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","innerHTML","onClick","QuickSort","values","setValues","quickSort","arr","start","end","a","partition","Promise","all","pivotValue","pivotIndex","swap","b","sleep","temp","element1","element2","ms","resolve","BubbleSort","bubbleSort","ListNode","this","next","prev","TreeNode","frequency","x","y","nodeNumberOnBranch","SinglyLinkedList","head","tail","newNode","current","newTail","oldHead","LinkedList","list","container","querySelector","div","createElement","marginLeft","borderRadius","padding","border","append","oldTail","borderColor","spacer","marginTop","pop","removeChild","oldLastSpacer","spacers","querySelectorAll","forEach","newHead","oldSpacer","shift","nodes","node","prepend","unshift","getXPos","prevNode","root","lowerQuartile","window","innerWidth","upperQuartile","distanceFromPrevNode","drawNode","xPos","yPos","w","startAngle","PI","canvas","getContext","ctx","beginPath","arc","strokeStyle","stroke","font","fillStyle","fillText","drawConnection","x1","y1","x2","y2","moveTo","lineTo","BinaryTree","midPoint","checkValue","alert","console","log","find","BinarySearchTree","tree","setTree","innerHeight","insert","clearRect","closePath","resetCanvas","MaxBinaryHeap","bubbleUp","bubbleDown","element","child1Idx","child2Idx","child1","child2","parentIndex","parent","BinaryHeap","heap","extractMax","HashBox","addToBox","boxIndex","key","box","addMessage","info","messageColor","messageBoard","verticalAlign","message","margin","appendChild","fadeElement","alpha","HashTable","size","keyMap","charCodeAt","hash","getElement","check","HashMap","setcurrentColor","e","set","handleSetHash","get","handleGetHash","Node","col","row","mousePressed","wall","setWall","onMouseOver","classList","remove","add","NodeRow","Dijkstras","setMousePressed","setNodes","handleCreateGraph","coordinates","getBoundingClientRect","lastRowY","bottom","lastNodeX","innerArray","handleSetStart","undefined","handleSetEnd","onMouseDown","onMouseUp","Algorithms","path","exact","render","App","ReactDOM"],"mappings":"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","file":"static/js/main.6e7894bb.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n\n    return (\n        <div className=\"h-screen text-center bg-white mb-6 p-4 shadow-xl\">\n            <div id=\"sorting-algo-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2 shadow-xl\">\n                    Sorting Algorithms\n                </div>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/merge-sort\">Merge Sort</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/quick-sort\">Quick Sort</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/bubble-sort\">Bubble Sort</Link>\n                </button>\n            </div>\n            <div id=\"data-structures-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2  shadow-xl\">\n                    Data Structures     \n                </div>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/linked-list\">Singly Linked List</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/binary-tree\">Binary Tree</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/binary-heap\">Binary Heap</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/hash-map\">Hash Map</Link>\n                </button>\n            </div>\n            <div id=\"path-finding-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2  shadow-xl\">\n                    Pathfinding Algorithms\n                </div>\n                <button className=\"bg-white w-full rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/dijkstras\">Dijkstra's Pathfinding</Link>\n                </button>\n            </div>\n            <div id=\"path-finding-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2  shadow-xl\">\n                    Other\n                </div>\n                <button className=\"bg-white w-full rounded-md hover:bg-gray-100\">\n                    <Link to=\"/DataStructure-and-Algorithm-Visualizer/multiple-pointers\">Multiple pointers</Link>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst ArrayCircle = (props) => {\n    return (\n        <div className=\"...\">\n            <div id={`circle-${props.index}`} className={`bg-gray-500 rounded-full mx-auto`} style={{width: `${props.value}px`, height: `${props.value}px`, textAlign: \"center\"}}>\n                {props.value}\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayCircle\n","import React, {useState, useEffect} from 'react'\nimport ArrayCircle from '../components/ArrayCircle'\n\nconst MultiplePointers = () => {\n\n    const [testArray, setTestArray] = useState([])\n    const [rows, setRows] = useState(1)\n\n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(10, 50); i++){\n            array.push(randomInt(20, 75))\n        }\n        setTestArray(array)\n        const rowNum = Math.floor(array.length / 5)\n        setRows(rowNum)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    const findSum = (total = 100, left = 0, right = testArray.length - 1, oldTarget1 = null, oldTarget2 = null) => {\n\n        if(left >= testArray.length - 1){\n            return false\n        }\n\n        let sum = testArray[left] + testArray[right]\n\n        if(oldTarget1 !== null){\n            oldTarget1.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n        if(oldTarget2 !== null){\n            oldTarget2.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n\n        const target1 = document.getElementById(`circle-${left}`)\n        const target2 = document.getElementById(`circle-${right}`)\n\n        target1.style.backgroundColor = \"whitesmoke\"\n        target2.style.backgroundColor = \"whitesmoke\"\n\n        if(sum === parseInt(total)) {\n            const answer1 = document.getElementById(`circle-${left}`)\n            const answer2 = document.getElementById(`circle-${right}`)\n\n            answer1.style.backgroundColor = \"green\"\n            answer2.style.backgroundColor = \"green\"\n            return true\n        } else if(right <= left + 1){\n            setTimeout(() => findSum(total, left + 1, testArray.length - 1, target1, target2), 100)\n        } else{\n            setTimeout(() => findSum(total, left, right - 1, target1, target2), 100)       \n        }\n    }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div>\n            <div className=\"w-full mt-6 mb-6 text-center shadow\">See if the sum of any two numbers in an array add up to a selected total</div>\n            <form className=\"w-full grid grid-cols-4 gap-4 justify-items-center\" onSubmit={(event) => {\n                event.preventDefault()\n                if(event.target[0].value !== \"\"){\n                    findSum(event.target[0].value)\n                }\n                else{\n                    findSum()\n                }\n            }}>\n                <input type=\"number\" placeholder=\"default 100\" className=\"col-start-2 border-2 rounded border-gray-200\"/>\n                <button type=\"submit\" className=\"col-start-3 bg-gray-300 hover:bg-gray-100 rounded-xl p-1 float-right\" >\n                    Run Multiple Pointers\n                </button>\n            </form>\n            <div className={`flex items-center h-64 grid grid-cols-${rows} grid-flow-row gap-8`}>\n                {testArray.map((value, index) => {\n                    return <ArrayCircle value={value} index={index} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default MultiplePointers\n","import React from 'react'\n\nconst ArrayBar = (props) => {\n    return (\n        <div id={`bar-${props.index}`} className={`array-bar w-full min-w-0 my-6 mx-1 bg-gray-300`} style={{height: `${props.value}px`}}>\n            {props.value}\n        </div>\n    )\n}\n\nexport default ArrayBar\n","export const getMergeSortAnimations = (array) => {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nconst mergeSortHelper = (mainArray,startIdx,endIdx,auxiliaryArray, animations) => {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nconst doMerge = (mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations) => {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n        } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","export const resetArray = () => {\n    const array = []\n    for(let i = 0; i < randomInt(20, 80); i++){\n        array.push(randomInt(20, 500))\n    }\n    return array\n}\n\nconst randomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}","import React, { useState, useEffect } from 'react'\nimport ArrayBar from '../components/ArrayBar';\nimport {getMergeSortAnimations} from '../helperMethods/MergeSort'\nimport {resetArray} from '../helperMethods/HelperMethods'\n\nconst MergeSort = () => {\n\n    const [testArray, setTestArray] = useState([])\n\n    // Change this value for the speed of the animations.\n    const ANIMATION_SPEED_MS = 20;\n\n    // This is the main color of the array bars.\n    const PRIMARY_COLOR = \"rgb(107, 114, 128)\";\n\n    // This is the color of array bars that are being compared throughout the animations.\n    const SECONDARY_COLOR = \"whitesmoke\";\n\n    // Need to change to more complicated merge sort\n    const mergeSort = () => {\n        const animations = getMergeSortAnimations(testArray);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar')\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx];\n              barOneStyle.style.height = `${newHeight}px`;\n              barOneStyle.innerHTML = `${newHeight}`\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n    useEffect(() => {\n        setTestArray(resetArray())\n    }, [])\n\n    return (\n      <div>\n        <div className=\"flex flex-row\">\n            {testArray.map((value, index) => {\n                return <ArrayBar value={value} index={index} key={index}/>\n            })}\n        </div>\n        <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\" onClick={() => mergeSort()}>\n            Run Merge Sort\n        </button>\n      </div>\n    )\n}\n\nexport default MergeSort\n","import React, { useEffect, useState } from 'react'\nimport {resetArray} from '../helperMethods/HelperMethods'\nimport ArrayBar from '../components/ArrayBar'\n// import { quickSort } from '../helperMethods/QuickSort'\n\nconst QuickSort = () => {\n\n    const [values, setValues] = useState([])\n    const ANIMATION_SPEED = 100\n    async function quickSort(arr, start, end) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(arr, start, end);\n        document.getElementById(`bar-${index}`).style.backgroundColor = \"#D1D5DB\"\n        \n        await Promise.all([\n            quickSort(arr, start, index - 1),\n            quickSort(arr, index + 1, end)\n        ]);\n    }\n    \n    async function partition(arr, start, end) {\n        for (let i = start; i <= end; i++) {\n            document.getElementById(`bar-${i}`).style.backgroundColor = \"#D6FFB7\"\n        }\n        \n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#D1D5DB\"\n            pivotIndex++;\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n            }\n        }\n        await swap(arr, pivotIndex, end);\n        \n        for (let i = start; i < end; i++) {\n            if (i != pivotIndex) {\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n            }\n        }\n        \n        return pivotIndex;\n    }\n    \n    async function swap(arr, a, b) {\n        await sleep(ANIMATION_SPEED);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n    \n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                {values.map((value, index) => {\n                    return <ArrayBar value={value} index={index} key={index}/>\n                })}\n            </div>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\"  onClick={() => quickSort(values, 0, values.length - 1)}>\n                Run Quick Sort\n            </button>\n        </div>\n    )\n}\n\nexport default QuickSort\n","import React, { useState } from 'react'\nimport ArrayBar from '../components/ArrayBar'\nimport { resetArray } from '../helperMethods/HelperMethods'\n\nconst BubbleSort = () => {\n\n    const [values, setValues] = useState(resetArray())\n\n    const bubbleSort = async () => {\n        \n        for(let i = 0; i < values.length; i++){\n            for(let j = 0; j < values.length; j++ ){\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n                document.getElementById(`bar-${j}`).style.backgroundColor = \"#D1D5DB\"\n                if(values[i] < values[j]){\n                    document.getElementById(`bar-${i}`).style.backgroundColor = \"#E0777D\"\n                    document.getElementById(`bar-${j}`).style.backgroundColor = \"#E0777D\"\n                    await swap(values, i, j)\n                    document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n                    document.getElementById(`bar-${j}`).style.backgroundColor = \"#D1D5DB\"\n                }\n            }\n        }\n    }\n\n    async function swap(arr, a, b) {\n        await sleep(100);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                {values.map((value, index) => {\n                    return <ArrayBar key={index} value={value} index={index} />\n                })}\n            </div>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\" onClick={() => bubbleSort()}>\n                Run Bubble Sort\n            </button>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\" onClick={() => setValues(resetArray())}>\n                Reset\n            </button>\n        </div>\n    )\n}\n\nexport default BubbleSort\n","export class ListNode {\n    constructor(value){\n        this.value = value\n        this.next = null\n        this.prev = null\n    }\n}\n\n\nexport class TreeNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.frequency = 0;\n        this.x = 0;\n        this.y = 0;\n        this.nodeNumberOnBranch = 0;\n    }\n}\n\nexport class HeapNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null; \n    }\n}\n\nexport class PathfindingNode {\n    constructor(val, priority){\n        this.val = val;\n        this.priority = priority;\n    }\n}\n\nexport class PriorityQueue {\n    constructor(){\n        this.values = [];\n    }\n    enqueue(val, priority){\n        let newNode = new Node(val, priority);\n        this.values.push(newNode);\n        this.bubbleUp();\n    }\n    bubbleUp(){\n        let idx = this.values.length - 1;\n        const element = this.values[idx];\n        while(idx > 0){\n            let parentIdx = Math.floor((idx - 1)/2);\n            let parent = this.values[parentIdx];\n            if(element.priority >= parent.priority) break;\n            this.values[parentIdx] = element;\n            this.values[idx] = parent;\n            idx = parentIdx;\n        }\n    }\n    dequeue(){\n        const min = this.values[0];\n        const end = this.values.pop();\n        if(this.values.length > 0){\n            this.values[0] = end;\n            this.sinkDown();\n        }\n        return min;\n    }\n    sinkDown(){\n        let idx = 0;\n        const length = this.values.length;\n        const element = this.values[0];\n        while(true){\n            let leftChildIdx = 2 * idx + 1;\n            let rightChildIdx = 2 * idx + 2;\n            let leftChild,rightChild;\n            let swap = null;\n\n            if(leftChildIdx < length){\n                leftChild = this.values[leftChildIdx];\n                if(leftChild.priority < element.priority) {\n                    swap = leftChildIdx;\n                }\n            }\n            if(rightChildIdx < length){\n                rightChild = this.values[rightChildIdx];\n                if(\n                    (swap === null && rightChild.priority < element.priority) || \n                    (swap !== null && rightChild.priority < leftChild.priority)\n                ) {\n                   swap = rightChildIdx;\n                }\n            }\n            if(swap === null) break;\n            this.values[idx] = this.values[swap];\n            this.values[swap] = element;\n            idx = swap;\n        }\n    }\n}\n\nclass Graph {\n    constructor(){\n           this.adjacencyList = {};\n    }\n\n    addVertex(vertex){\n        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = []\n    }\n\n    addEdge(vertex1, vertex2) {\n        this.adjacencyList[vertex1].push(vertex2)\n        this.adjacencyList[vertex2].push(vertex1)\n    }\n\n    removeEdge(vertex1, vertex2) {\n        let array = []\n        for(let i = 0; i < this.adjacencyList[vertex1]; i++){\n            if(this.adjacencyList[vertex1][i] !== vertex2) {\n                array.push(this.adjacencyList[vertex1][i])\n            }\n        }\n\n        let array2 = []\n        for(let i = 0; i < this.adjacencyList[vertex2]; i++){\n            if(this.adjacencyList[vertex2][i] !== vertex1) {\n                array2.push(this.adjacencyList[vertex2][i])\n            }\n        }\n\n        this.adjacencyList[vertex1] = array\n        this.adjacencyList[vertex2] = array2\n    }\n\n    removeVertex(vertex){\n        while(this.adjacencyList[vertex].length){\n            const adjacentVertex = this.adjacencyList[vertex].pop();\n            this.removeEdge(vertex, adjacentVertex);\n        }\n        delete this.adjacencyList[vertex]\n    }\n\n    depthFirstRecursive(start){\n        const result = [];\n        const visited = {};\n        const adjacencyList = this.adjacencyList;\n\n        (function dfs(vertex){\n            if(!vertex) return null;\n            visited[vertex] = true;\n            result.push(vertex);\n            adjacencyList[vertex].forEach(neighbor => {\n                if(!visited[neighbor]){\n                    return dfs(neighbor)\n                }\n            });\n        })(start);\n\n        return result;\n    }\n\n    depthFirstIterative(start){\n        const stack = [start];\n        const result = [];\n        const visited = {};\n        let currentVertex;\n\n        visited[start] = true;\n        while(stack.length){\n            currentVertex = stack.pop();\n            result.push(currentVertex);\n\n            this.adjacencyList[currentVertex].forEach(neighbor => {\n               if(!visited[neighbor]){\n                   visited[neighbor] = true;\n                   stack.push(neighbor)\n               } \n            });\n        }\n        return result;\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { ListNode } from '../helperMethods/DataStructureClasses'\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(value){\n        let newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        }\n        else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this;\n    }\n    pop(){\n        if(!this.head){\n            return undefined\n        }\n\n        let current = this.head\n        let newTail = current\n        while(current.next){\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if(this.length === 0){\n            this.head = null\n            this.tail = null\n        }\n        return current;\n\n    }\n    shift() {\n        if(!this.head){\n            return undefined\n        }\n\n        let oldHead = this.head\n        this.head = oldHead.next\n        this.length--\n\n        return oldHead\n    }\n    unshift(value) {\n        const newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            newNode.next = this.head\n            this.head = newNode\n        }\n\n        this.length ++\n        return this\n    }\n}\n\nconst LinkedList = () => {\n\n    const [list, setList] = useState(new SinglyLinkedList())\n    \n    const push = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0){\n            const value = 1\n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.id = \"node-head\"\n            div.className = \"node\"\n            container.append(div)\n            list.push(value)\n        } else {\n            if(list.length > 1){\n                const oldTail = document.getElementById(\"node-tail\")\n                oldTail.id = `node-${list.tail.value}`\n                oldTail.style.borderColor = \"darkgray\"\n                const lastSpacer = document.getElementById(\"last-spacer\")\n                lastSpacer.id = `spacer-${list.length - 1}`\n            }\n            const value = list.tail.value + 1\n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.id = \"last-spacer\"\n            spacer.className = \"spacer\"\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid lightgreen'\n            div.innerHTML = value\n            div.id = \"node-tail\"\n            div.className = \"node\"\n\n            container.append(spacer)\n            container.append(div)\n            list.push(value)\n        }\n    }\n\n    const pop = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0) {\n            return\n        }\n        list.pop()\n\n        if(list.length === 0){\n            const head = document.getElementById(\"node-head\")\n            container.removeChild(head)\n        }\n        else {\n            const oldTail = document.getElementById(\"node-tail\")\n            container.removeChild(oldTail)\n\n            const oldLastSpacer = document.getElementById(\"last-spacer\")\n            container.removeChild(oldLastSpacer)\n\n            if(list.length !== 1){\n                const newTail = document.getElementById(`node-${list.tail.value}`)\n                newTail.id = \"node-tail\"\n                newTail.style.borderColor = \"lightgreen\"\n    \n                const newLastSpacer = document.getElementById(`spacer-${list.length - 1}`)\n                newLastSpacer.id = \"last-spacer\"\n            }\n        }\n        \n    }\n\n    const shift = () => {\n        if(list.length === 0) return;\n        const container = document.querySelector(\"#node-container\")\n        const oldHead = document.getElementById(\"node-head\")\n        container.removeChild(oldHead)\n        if(list.length > 2){\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            spacers.forEach((spacer, index) => {\n                // debugger\n                if(index === spacers.length - 1){\n                    return;\n                } \n                else {\n                    spacer.id = `spacer-${index}`\n                }\n            })\n\n            const newHead = document.getElementById(`node-${list.head.value + 1}`)\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            // debugger\n            const oldSpacer = document.getElementById(\"spacer-0\")\n            container.removeChild(oldSpacer)\n        }\n        else if(list.length === 2){\n            const newHead = document.getElementById(\"node-tail\")\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            const oldSpacer = document.getElementById(`last-spacer`)\n            container.removeChild(oldSpacer)\n        }\n        list.shift()\n    }\n\n    const unshift = () => {\n        if(list.length === 0) return push()\n        else {\n            const nodes = document.querySelectorAll(\".node\")\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            const container = document.querySelector(\"#node-container\")\n\n            const value = list.head.value - 1\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.className = \"node\"\n            div.id = \"node-head\"\n            \n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.className = \"spacer\"\n\n            if(list.length === 1){\n                spacer.id = \"last-spacer\"\n            }\n            else {\n                spacer.id = `spacer-1`\n            }\n\n            nodes.forEach((node, index) => {\n                node.innerHTML = `${value + index + 1}`\n\n                if(index === nodes.length - 1){\n                    node.style.borderColor = \"lightgreen\"\n                    return;\n                }\n                else {\n                    node.id = `node-${node.innerHTML}`\n                    node.style.borderColor = \"darkgray\"\n                }\n            })\n\n            spacers.forEach((spacer, index) => {\n                if(index === spacers.length - 1){\n                    return;\n                }\n                else {\n                    spacer.id = `spacer-${index + 2}`\n                }\n            })\n\n\n            container.prepend(spacer)\n            container.prepend(div)\n            list.unshift(value)\n        }\n\n    }\n\n    useEffect(() => {\n        list.head = 0\n    }, [])\n\n    return (\n        <div>\n            <div id=\"node-container\" className=\"flex flex-row\">\n\n            </div>\n            <button className=\"ml-2\" onClick={() => push()}> Push</button>\n            <button className=\"ml-2\" onClick={() => pop()}> Pop</button>\n            <button className=\"ml-2\" onClick={() => shift()}> Shift</button>\n            <button className=\"ml-2\" onClick={() => unshift()}> Unshift</button>\n        </div>\n    )\n}\n\nexport default LinkedList\n","export const getXPos = (prevNode, root, left = true) => {\n    \n    const lowerQuartile = Math.floor(window.innerWidth * .9) * .25\n    const upperQuartile = Math.floor(window.innerWidth * .9) * .75\n\n    if(prevNode === root){\n        let xPos\n        left ? xPos = lowerQuartile: xPos = upperQuartile\n        return xPos\n    }\n\n    let xPos\n    \n    const distanceFromPrevNode = (60 - Math.floor((parseInt(prevNode.nodeNumberOnBranch) * 8)))\n    if(left){\n        if(prevNode.nodeNumberOnBranch < 3){\n            xPos = prevNode.x - (distanceFromPrevNode * 2)\n        }\n        else {\n            xPos = prevNode.x - distanceFromPrevNode\n        }\n    }\n    else {\n        if(prevNode.nodeNumberOnBranch < 3){\n            xPos = prevNode.x + (distanceFromPrevNode * 2)\n        }\n        else {\n            xPos = prevNode.x + distanceFromPrevNode\n        }\n    }\n\n    return xPos\n}\n\nexport const drawNode = (value, xPos, yPos, w, color = \"#000000\", startAngle = 1.9 * Math.PI) => {\n    const canvas = document.getElementById(\"tree-canvas\")\n\n    \n    if(canvas.getContext){\n        let ctx = canvas.getContext(\"2d\");\n\n        if(startAngle > 0){\n            ctx.beginPath();\n            ctx.arc(xPos, yPos, w, startAngle, 2 * Math.PI, false);\n            ctx.strokeStyle = color\n            ctx.stroke()\n            setTimeout(() => drawNode(value, xPos, yPos, w, color, startAngle - .1), 20)\n        }\n        else {\n            ctx.beginPath();\n            ctx.arc(xPos, yPos, w, 0, 2 * Math.PI, false);\n            ctx.stroke()\n            ctx.font = '10pt Georgia';\n            ctx.fillStyle = color;\n            ctx.textAlign = 'center';\n            ctx.fillText(value, xPos, yPos + 3);\n        }\n    }\n}\n\nexport const drawConnection = (x1, y1, x2, y2, color = \"#000000\") => {\n\n    const canvas = document.getElementById(\"tree-canvas\")\n    if(canvas.getContext){\n        var ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.strokeStyle = color\n        ctx.stroke(); \n    }\n}\n\nexport const resetCanvas = () => {\n    const canvas = document.getElementById(\"tree-canvas\")\n    if(canvas.getContext){\n        var ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.clearRect(0, 0, window.innerWidth * .9, window.innerHeight * .9);\n        ctx.closePath();\n    }\n}","import React, { useState } from 'react'\nimport { TreeNode } from '../helperMethods/DataStructureClasses'\nimport { drawNode, getXPos, drawConnection, resetCanvas } from '../helperMethods/BinarySearchAnimations';\n\nclass BinaryTree {\n    constructor() {\n        this.root = null;\n    }\n\n    insert(value) {\n        const newNode = new TreeNode(value)\n        const midPoint = Math.floor((window.innerWidth * .9) / 2)\n        if(!this.root) {\n            //location on canvas for root node\n            const xPos = midPoint\n            const yPos = 25\n            const radius = 18\n\n            //assign the node position points so they can be referenced later\n            newNode.x = xPos\n            newNode.y = yPos\n\n            drawNode(value, xPos, yPos, radius)\n\n            this.root = newNode\n            return this\n        }\n\n        this.checkValue(this.root, newNode)\n    }\n\n    checkValue(prevNode, newNode){\n        if(parseInt(prevNode.value) > parseInt(newNode.value)){\n            if(prevNode.left === null){\n                const xPos = getXPos(prevNode, this.root, true)\n                const yPos = prevNode.y + 50\n                const radius = 18\n                \n                //assign the node position points so they can be referenced later\n                newNode.x = xPos\n                newNode.y = yPos\n\n                drawNode(parseInt(newNode.value), xPos, yPos, radius)\n                setTimeout(() => drawConnection(prevNode.x, prevNode.y, xPos, yPos), 1750)\n                prevNode.left = newNode\n                return this\n            }\n            prevNode = prevNode.left\n            newNode.nodeNumberOnBranch += 1\n            setTimeout(() => this.checkValue(prevNode, newNode), 250)\n        }\n\n        else if(parseInt(prevNode.value) < parseInt(newNode.value)){\n            if(prevNode.right === null){\n                const xPos = getXPos(prevNode, this.root, false)\n                const yPos = prevNode.y + 50\n                const radius = 18\n                \n                //assign the node position points so they can be referenced later\n                newNode.x = xPos\n                newNode.y = yPos\n                newNode.nodeNumberOnBranch += 1\n\n                drawNode(parseInt(newNode.value), xPos, yPos, radius)\n                setTimeout(() => drawConnection(prevNode.x, prevNode.y, xPos, yPos), 1750)\n                prevNode.right = newNode\n                return this\n            }\n\n            prevNode = prevNode.right\n            newNode.nodeNumberOnBranch += 1\n            setTimeout(() => this.checkValue(prevNode, newNode), 250)\n        } \n        \n        else {\n            prevNode.frequency += 1\n            return this\n        }\n    }\n\n    find(value, node = this.root){\n        if(!node){\n            alert(`No node with value ${value} was found`)\n            return false\n        }\n\n        if(parseInt(value) === parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#00FF00\")\n            console.log(node.nodeNumberOnBranch)\n            return node\n        }\n        else if(parseInt(value) < parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#ffa500\")\n            if(node.left !== null){\n                setTimeout(() => drawConnection(node.x, node.y, node.left.x, node.left.y, \"#ffa500\"), 1750)\n            }\n            setTimeout(() => this.find(value, node.left), 2000)\n        }\n        else if(parseInt(value) > parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#ffa500\")\n            if(node.right !== null){\n                setTimeout(() => drawConnection(node.x, node.y, node.right.x, node.right.y, \"#ffa500\"), 1750)\n            }\n            setTimeout(() => this.find(value, node.right), 2000)\n        }\n        else{\n            return false\n        }\n    }\n}\n\nconst BinarySearchTree = () => {\n\n    const [tree, setTree] = useState(new BinaryTree())\n\n\n    const randomBinaryTree = () => {\n        let i = 0\n        while(i < 20){\n            tree.insert(Math.floor((Math.random() * 100)))\n            i++\n        }\n    }\n    \n    const resetTree = () => {\n        setTree(new BinaryTree())\n        resetCanvas()\n    }\n\n    return (\n        <div id=\"binary-tree-page\" className=\"h-screen w-screen\">\n            <canvas id=\"tree-canvas\" className=\"mt-2 ml-2 border-gray-200 border-2\" width={window.innerWidth * .9} height={window.innerHeight * .9} >\n                \n            </canvas>\n            <div className=\"flex flex-row\">\n                <form \n                onSubmit={(event) => {\n                    event.preventDefault()\n                    tree.insert(event.target[0].value)\n                }}>\n                    <input className=\"m-6\" type=\"number\" id=\"value\" placeholder=\"0\"></input>\n                    <button type=\"submit\">\n                        Add\n                    </button>\n                </form>\n                <form \n                onSubmit={(event) => {\n                    event.preventDefault()\n                    tree.find(event.target[0].value)\n                }}>\n                    <input className=\"m-6\" type=\"number\" id=\"value\" placeholder=\"0\"></input>\n                    <button type=\"submit\" >\n                        Find\n                    </button>\n                </form>\n                <button className=\"m-6\" onClick={randomBinaryTree} >\n                    Random Tree\n                </button>\n                <button className=\"m-6\" onClick={resetTree} >\n                    Reset\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree\n","import React from 'react'\n// import { HeapNode } from '../helperMethods/DataStructureClasses';\n\nclass MaxBinaryHeap {\n    constructor() {\n        this.values = [];\n    }\n\n    insert(value) {\n        this.values.push(value)\n        this.bubbleUp()\n    }\n\n    extractMax() {\n       const max = this.values[0]\n       const end = this.values.pop()\n       if(this.values.length > 0){\n           this.values[0] = end\n           this.bubbleDown()\n       }\n       return max\n    }\n\n    bubbleDown() {\n\n        let index = 0\n        const length = this.values.length\n        const element = this.values[index]\n\n        while(index < this.values.length - 1){\n            let child1Idx = (2*index) + 1\n            let child2Idx = (2*index) + 2\n            let child1, child2\n            let swap = null\n\n            if(child1Idx < length){\n                child1 = this.values[child1Idx]\n                if(child1 > element){\n                    swap = child1Idx\n                }\n            }\n\n            if(child2Idx < length){\n                child2 = this.values[child2Idx]\n                if(!swap && child2 > element){\n                    swap = child2Idx\n                }\n                if(swap && child2 > child1){\n                    swap = child2Idx\n                }\n            }\n\n            if(!swap) break\n            this.values[index] = this.values[swap]\n            this.values[swap] = element\n            index = swap\n        }\n    }\n\n    bubbleUp(){\n        \n        let index = this.values.length - 1\n        const value = this.values[index]\n        \n        while(index > 0){\n            let parentIndex = Math.floor(((index - 1)/2))\n            let parent = this.values[parentIndex]\n            if(value <= parent) break;\n            this.values[parentIndex] = value\n            this.values[index] = parent\n            index = parentIndex\n        }\n    }\n}\n\n\nconst BinaryHeap = () => {\n\n    const heap = new MaxBinaryHeap()\n\n    return (\n        <div id=\"binary-heap-page\" className=\"h-screen w-screen\">\n            <div>Currently being worked on</div>\n            <canvas id=\"heap-canvas\" className=\"mt-2 ml-2 border-gray-200 border-2\" width={window.innerWidth * .9} height={window.innerHeight * .9} >\n            \n            </canvas>\n            <button className=\"border-2 rounded bg-gray-300 m-2 hover:bg-gray-100 border-gray-500\" onClick={() => heap.insert(Math.floor((Math.random() * 25)))}>Insert Number</button>\n            <button className=\"border-2 rounded bg-gray-300 m-2 hover:bg-gray-100 border-gray-500\" onClick={() => {\n                console.log(heap.values)\n                console.log(heap.extractMax())\n                }}>Extract</button>\n        </div>\n    )\n}\n\nexport default BinaryHeap\n","import React from 'react'\n\nconst HashBox = (props) => {\n\n    return (\n        <div className=\"block w-2/12\">\n            <div className=\"text-center\">\n                {props.index}\n            </div>\n            <div id={`box-${props.index}`} className=\"h-5/6 border-4 m-1 p-2 border-black text-center\">\n                {\n                props.element ? \n                    props.element.map((element, index) => {\n                        return <div id={`box-${props.index}-element-${index}`} className=\"rounded\" style={{backgroundColor: element[0]}}>[{element[0]}, {element[1]}],</div>\n                    })\n                    : \n                    \"\"\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default HashBox\n","export const addToBox  = (boxIndex, key, value) => {\n\n    const box = document.getElementById(`box-${boxIndex}`)\n\n    box.style.borderColor = \"orange\"\n    addMessage(`Pushed key value pair [${key},${value}] to the end of the array located in index ${boxIndex}`)\n    setTimeout(() => box.style.borderColor = \"black\", 2500)\n}\n\n\nexport const addMessage = (info, color = \"green\") => {\n    const messageBoard = document.getElementById(\"message-board\")\n    messageBoard.style.verticalAlign = \"bottom\"\n\n    let messageColor;\n    \n    const message = document.createElement(\"div\")\n    message.innerHTML = info\n\n    if(color === \"green\") messageColor = \"0, 255, 0\"\n    else messageColor = \"255, 0, 0\"\n    message.style.width = \"90%\"\n    message.style.margin = \"2%\"\n    message.style.backgroundColor = `rgba(${messageColor}, 1)`\n    messageBoard.appendChild(message)\n    setTimeout(() => fadeElement(messageBoard, message, 1, messageColor), 50)\n}\n\nexport const findElement = (boxIndex, key) => {\n    \n}\n\nconst fadeElement = (container, element, alpha = 1, color = '0, 255, 0') => {\n    alpha = alpha - 0.02\n    if(alpha > 0){\n        element.style.color = `rgba(0, 0, 0, ${alpha})`\n        element.style.backgroundColor = `rgba(${color}, ${alpha})`\n        setTimeout(() => fadeElement(container, element, alpha, color), 50)\n    }else {\n        container.removeChild(element)\n    }\n}","import React, { useState, useEffect } from 'react'\nimport HashBox from '../components/HashBox';\nimport { addToBox, addMessage } from '../helperMethods/HashMapAnimations';\n\nclass HashTable {\n\n    constructor(size=6){\n        const array = []\n        for(let i = 0; i < size; i++){\n            array.push(null)\n        }\n        this.keyMap = array\n    }\n\n    hash(key) {\n        let total = 0;\n        let primeNumber = 31;\n        for (let i = 0; i < Math.min(key.length, 50); i++) {\n            let char = key[i];\n            let value = char.charCodeAt(0) - 96\n            total = (total * primeNumber + value) % this.keyMap.length;\n        }\n        return total;\n    }\n\n    set(key, value){\n        const index = this.hash(key)\n\n        if(!this.keyMap[index]){\n            this.keyMap[index] = [[key,value]]\n            addToBox(index, key, value)\n        } else {\n            this.keyMap[index].push([key,value])\n            addToBox(index, key, value)\n        }\n    }\n\n    get(key){\n        const index = this.hash(key)\n        let value\n        if(!this.keyMap[index]) {\n            return undefined\n        }\n        const box = document.getElementById(`box-${index}`)\n        box.style.borderColor = \"orange\"\n\n        if(this.keyMap[index].length >= 1) {\n            value = this.getElement(index, key, 0, this.keyMap[index].length)\n        }\n\n        setTimeout(() => box.style.borderColor = \"black\", 5000)\n        return value\n    }\n\n    getElement(index, key, i, length) {\n        if(i < length){  \n            const check = document.getElementById(`box-${index}-element-${i}`)\n            check.style.border = \"2px solid orange\"\n            check.style.backgroundColor = \"white\"\n            if(this.keyMap[index][i][0] === key){\n                check.style.borderColor = \"green\"\n                setTimeout(() => {\n                    check.style.border = \"\"\n                    check.style.backgroundColor = this.keyMap[index][i][0]\n                    addMessage(`The value found for key:${key} was ${this.keyMap[index][i][1]}`)\n                }, 1000)\n                return this.keyMap[index][i][1]\n            }\n            else {\n                setTimeout(() => {\n                    check.style.border = \"\"\n                    check.style.backgroundColor = this.keyMap[index][i][0]\n                    this.getElement(index, key, i + 1, length)\n                }, 1000)\n            }\n        }\n        else return undefined\n    }\n}\n\nconst HashMap = () => {\n    const [hash, setHash] = useState(new HashTable())\n    const [currentColor, setcurrentColor] = useState(['black', '#000000'])\n\n    const x = 6 % 2\n    const y = x ? 'one' : 'two'\n    console.log(y)\n    const handleSetHash = (event) => {\n        event.preventDefault()\n        const key = event.target[0].value\n        const value = event.target[1].value\n        if(key !== \"\" && value!== \"\") {\n            setcurrentColor([key, value])\n            hash.set(key, value)\n        }\n        else{\n            alert(\"You must enter a color and hex color\")\n        }\n    }\n\n    const handleGetHash = (event) => {\n        event.preventDefault()\n        const key = event.target[0].value\n\n        if(key !== \"\"){\n            if(hash.get(key)){\n                setcurrentColor([key, hash.get(key)])\n            }\n        }\n    }\n\n    return (\n        <div className=\"w-full h-screen\" >\n            <div className=\"h-5/6\">\n                <div className=\"text-center shadow m-2 bg-white\">\n                    Hashmap Using Separate Chaining\n                </div>\n                <div className=\"text-center m-2 bg-white\">\n                    (enter any key, but best with colors)\n                </div>\n                <div id=\"hash-map-container\" className=\"w-full h-4/6 p-2 flex flex-row\">\n                    [{hash.keyMap.map((element, index) => {\n                        return <HashBox element={element} index={index} key={index}/>\n                    })}]\n                </div>\n                <div id=\"message-board\" className=\"h-1/4 m-2 w-full rounded-sm border-2 border-gray-200 overflow-auto\"> \n\n                </div>\n            </div>\n            <div className=\"flex flex-row bg-gray-100 rounded m-2\">\n                <form className=\"m-2 w-4/6\" onSubmit={(e) => handleSetHash(e)}>\n                    <input className=\"m-2 w-1/3\" type=\"text\" placeholder=\"Enter a key, ex: red\"/>\n                    <input className=\"m-2 w-1/3\" type=\"text\" placeholder=\"Enter a value, ex: #FF0000\"/>\n                    <button className=\"bg-gray-300 hover:bg-white pl-2 pr-2 rounded m-6\" type=\"submit\">Set</button>\n                </form>\n                <form className=\"m-2\" onSubmit={(e) => handleGetHash(e)}>\n                    <input className=\"m-6\" type=\"text\" placeholder=\"Enter a key\"/>\n                    <button className=\"bg-gray-300 hover:bg-white pl-2 pr-2 rounded m-6\" type=\"submit\">Get</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default HashMap\n","import React, { useState } from 'react';\n\nimport '../styles/node.css';\n\nconst Node = (props) => {\n    \n    const { col, row, mousePressed } = props\n\n    const [start, setStart] = useState(false)\n    const [end, setEnd] = useState(false)\n    const [wall, setWall] = useState(false)\n\n    const onMouseEnter = (event) => {\n\n        if(!mousePressed) return;\n\n        if(wall){\n            event.target.classList.remove(\"node-wall\")\n            setWall(false)\n        }\n        else{\n            event.target.classList.add(\"node-wall\")\n            setWall(true)\n        }\n    }\n\n    if(col === 0) return <div className=\"column-number\">{row > 0 ? row : null}</div>;\n    else return <div id={`node-${row}-${col}`} className={\"node ml-1 mb-1\"} onMouseOver={(e) => onMouseEnter(e)}></div>;\n}\n\nexport default Node","import React from 'react'\nimport Node from './Node'\n\nconst NodeRow = (props) => {\n    return (\n        <div className={`row-${props.row} flex flex-row`}>\n            {props.row === 0 ? props.values.map((node, index) => {\n                return <div style={{width: \"25px\", height: \"25px\"}} key={index}> {node.col > 0 ? node.col : null} </div>\n            }) :\n            props.values.map((node, index) => {\n                return <Node row={node.row} col={node.col} index={index} key={index} mousePressed={props.mousePressed}/>\n            })}\n        </div>\n    )\n}\n\nexport default NodeRow\n","import React, { useEffect, useState } from 'react'\nimport { PriorityQueue } from '../helperMethods/DataStructureClasses'\nimport NodeRow from '../components/NodeRow';\n\nclass WeightedGraph {\n    constructor() {\n        this.adjacencyList = {};\n    }\n    addVertex(vertex){\n        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];\n    }\n    addEdge(vertex1,vertex2, weight){\n        this.adjacencyList[vertex1].push({node:vertex2, weight});\n        this.adjacencyList[vertex2].push({node:vertex1, weight});\n    }\n    Dijkstra(start, finish){\n        const nodes = new PriorityQueue();\n        const distances = {};\n        const previous = {};\n        let path = [] //to return at end\n        let smallest;\n        //build up initial state\n        for(let vertex in this.adjacencyList){\n            if(vertex === start){\n                distances[vertex] = 0;\n                nodes.enqueue(vertex, 0);\n            } else {\n                distances[vertex] = Infinity;\n                nodes.enqueue(vertex, Infinity);\n            }\n            previous[vertex] = null;\n        }\n        // as long as there is something to visit\n        while(nodes.values.length){\n            smallest = nodes.dequeue().val;\n            if(smallest === finish){\n                //WE ARE DONE\n                //BUILD UP PATH TO RETURN AT END\n                while(previous[smallest]){\n                    path.push(smallest);\n                    smallest = previous[smallest];\n                }\n                break;\n            } \n            if(smallest || distances[smallest] !== Infinity){\n                for(let neighbor in this.adjacencyList[smallest]){\n                    //find neighboring node\n                    let nextNode = this.adjacencyList[smallest][neighbor];\n                    //calculate new distance to neighboring node\n                    let candidate = distances[smallest] + nextNode.weight;\n                    let nextNeighbor = nextNode.node;\n                    if(candidate < distances[nextNeighbor]){\n                        //updating new smallest distance to neighbor\n                        distances[nextNeighbor] = candidate;\n                        //updating previous - How we got to neighbor\n                        previous[nextNeighbor] = smallest;\n                        //enqueue in priority queue with new priority\n                        nodes.enqueue(nextNeighbor, candidate);\n                    }\n                }\n            }\n        }\n        return path.concat(smallest).reverse();     \n    }\n}\n\nconst Dijkstras = () => {\n\n    const [mousePressed, setMousePressed] = useState(false)\n    const [nodes, setNodes] = useState([])\n\n    const handleCreateGraph = () => {\n        const container = document.getElementById(\"dijkstras-grid\")\n        const coordinates = container.getBoundingClientRect()\n        let row = 0\n        let col = 0\n        let lastRowY = 25\n        const array = []\n        while(lastRowY < coordinates.bottom){\n            let lastNodeX = 25\n            const innerArray = []\n            \n            while(lastNodeX < coordinates.right){\n                innerArray.push({row: row, col: col})\n                lastNodeX += 25\n                col++\n            }\n\n            array.push(innerArray)\n            row++\n            col = 0\n            lastRowY += 31\n        }\n\n        setNodes(array)\n    }\n\n    const handleMouseDown = () => {\n        // debugger\n        setMousePressed(true)\n    }\n\n    const handleMouseUp = () => {\n        // debugger\n        setMousePressed(false)\n    }\n\n    const handleSetStart = (event = undefined, row = 15, col =15) => {\n        if(event) event.preventDefault();\n\n        const node = document.getElementById(`node-${row}-${col}`)\n\n        node.style.backgroundColor = \"lightgreen\"\n    }\n    const handleSetEnd = (event = undefined, row = 15, col = 50) => {\n        if(event) event.preventDefault();\n\n        const node = document.getElementById(`node-${row}-${col}`)\n\n        node.style.backgroundColor = \"magenta\"\n    }\n\n    useEffect(async () => {\n        await handleCreateGraph()\n        handleSetStart()\n        handleSetEnd()\n    }, [])\n\n    return (\n        <div id=\"dijkstras-container\" className=\"w-full h-full\" onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\n            <div id=\"dijkstras-grid\" className=\"w-5/6 h-5/6 m-12 ml-24 border-2 border-gray-300 p-2\">\n                {nodes.map(row => {\n                    return <NodeRow values={row} row={row[0].row} mousePressed={mousePressed} />\n                })}\n            </div>\n            <form onSubmit={(e) => handleSetStart(e, e.target[1].value, e.target[3].value)}>\n                <label>Row: </label>\n                <input type=\"number\" placeholder=\"15\" />\n                <label>Col: </label>\n                <input type=\"number\" placeholder=\"15\" />\n                <button type=\"submit\">\n                    Set Start Point\n                </button>\n            </form>\n            <form onSubmit={(e) => handleSetEnd(e, e.target[1].value, e.target[3].value)}>\n                <label>Row: </label>\n                <input type=\"number\" placeholder=\"15\" />\n                <label>Col: </label>\n                <input type=\"number\" placeholder=\"50\" />\n                <button type=\"submit\">\n                    Set End Point\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default Dijkstras\n","import React from 'react'\nimport MultiplePointers from './containers/MultiplePointers'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport MergeSort from './containers/MergeSort';\nimport QuickSort from './containers/QuickSort';\nimport BubbleSort from './containers/BubbleSort';\nimport LinkedList from './containers/SingleLinkedList';\nimport BinarySearchTree from './containers/BinaryTree';\nimport BinaryHeap from './containers/BinaryHeap';\nimport HashMap from './containers/HashMap';\nimport Dijkstras from './containers/Dijkstras';\n\nconst Algorithms = () => {\n    \n    return (\n        <div className=\"w-screen\">\n            <Switch>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/multiple-pointers\" exact render={() => <MultiplePointers /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/merge-sort\" exact render={() => <MergeSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/quick-sort\" exact render={() => <QuickSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/bubble-sort\" exact render={() => <BubbleSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/linked-list\" exact render={() => <LinkedList /> }/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/binary-tree\" exact render={() => <BinarySearchTree />}/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/binary-heap\" exact render={() => <BinaryHeap />}/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/hash-map\" exact render={() => <HashMap />}/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/dijkstras\" exact render={() => <Dijkstras />}/>\n                <Redirect to=\"/DataStructure-and-Algorithm-Visualizer/merge-sort\"/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Algorithms\n","import Navbar from './Navbar'\nimport Algorithms from './Algorithms'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div className=\"App h-screen flex flex-row\">\n      <Router>\n        <Navbar />\n        <Algorithms />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}