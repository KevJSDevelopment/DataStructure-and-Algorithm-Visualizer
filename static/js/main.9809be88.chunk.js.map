{"version":3,"sources":["containers/Navbar.js","components/ArrayCircle.js","components/MultiplePointers.js","components/Home.js","components/ArrayBar.js","helperMethods/MergeSort.js","helperMethods/HelperMethods.js","components/MergeSort.js","components/QuickSort.js","components/BubbleSort.js","helperMethods/DataStructureClasses.js","components/SingleLinkedList.js","helperMethods/BinarySearchHelpers.js","components/BinaryTree.js","containers/Algorithms.js","App.js","index.js"],"names":["Navbar","className","id","to","ArrayCircle","props","index","style","width","value","height","textAlign","MultiplePointers","useState","testArray","setTestArray","rows","setRows","randomInt","min","max","Math","floor","random","findSum","left","right","length","total","oldTarget1","oldTarget2","sum","backgroundColor","target1","document","getElementById","target2","answer1","answer2","setTimeout","useEffect","array","i","push","rowNum","resetArray","map","onClick","Home","ArrayBar","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","doMerge","k","j","MergeSort","mergeSort","slice","getMergeSortAnimations","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","innerHTML","QuickSort","values","setValues","quickSort","arr","start","end","a","partition","Promise","all","pivotValue","pivotIndex","swap","b","sleep","temp","element1","element2","ms","resolve","BubbleSort","bubbleSort","ListNode","this","next","prev","TreeNode","frequency","x","y","nodeNumberOnBranch","SinglyLinkedList","head","tail","newNode","current","newTail","oldHead","LinkedList","list","container","querySelector","div","createElement","marginLeft","borderRadius","padding","border","append","oldTail","borderColor","spacer","marginTop","pop","removeChild","oldLastSpacer","spacers","querySelectorAll","forEach","newHead","oldSpacer","shift","nodes","node","prepend","unshift","getXPos","prevNode","root","lowerQuartile","window","innerWidth","upperQuartile","distanceFromPrevNode","parseInt","drawNode","xPos","yPos","w","startAngle","PI","canvas","getContext","ctx","beginPath","arc","strokeStyle","stroke","font","fillStyle","fillText","drawConnection","x1","y1","x2","y2","moveTo","lineTo","BinaryTree","midPoint","checkValue","alert","console","log","find","BinarySearchTree","tree","setTree","innerHeight","onSubmit","event","preventDefault","insert","target","type","placeholder","clearRect","closePath","resetCanvas","Algorithms","path","exact","render","component","App","ReactDOM"],"mappings":"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","file":"static/js/main.9809be88.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n\n    return (\n        <div className=\"h-screen text-center bg-white mb-6 p-4 shadow-xl\">\n            <div id=\"sorting-algo-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2 shadow-xl\">\n                    Sorting Algorithms\n                </div>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/merge-sort\">Merge Sort</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/quick-sort\">Quick Sort</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/bubble-sort\">Bubble Sort</Link>\n                </button>\n            </div>\n            <div id=\"data-structures-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2  shadow-xl\">\n                    Data Structures     \n                </div>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/linked-list\">Singly Linked List</Link>\n                </button>\n                <button className=\"bg-white w-full mb-2 rounded-md hover:bg-gray-100\">\n                    <Link to=\"/binary-tree\">Binary Tree</Link>\n                </button>\n            </div>\n            <div id=\"path-finding-container\" className=\"mb-12\">\n                <div className=\"border-gray-100 w-full rounded-sm border-2 mb-2  shadow-xl\">\n                    Pathfinding Algorithms\n                </div>\n            </div>\n            <button className=\"bg-white w-full rounded-md hover:bg-gray-100\">\n                <Link to=\"/multiple-pointers\">Multiple pointers</Link>\n            </button>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst ArrayCircle = (props) => {\n    return (\n        <div className=\"...\">\n            <div id={`circle-${props.index}`} className={`bg-gray-500 rounded-full mx-auto`} style={{width: `${props.value}px`, height: `${props.value}px`, textAlign: \"center\"}}>\n                {props.value}\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayCircle\n","import React, {useState, useEffect} from 'react'\nimport ArrayCircle from './ArrayCircle'\nimport Navbar from '../containers/Navbar'\n\nconst MultiplePointers = () => {\n\n    const [testArray, setTestArray] = useState([])\n    const [rows, setRows] = useState(1)\n\n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(10, 50); i++){\n            array.push(randomInt(20, 75))\n        }\n        setTestArray(array)\n        const rowNum = Math.floor(array.length / 5)\n        setRows(rowNum)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    const findSum = (left = 0, right = testArray.length - 1, total = 100, oldTarget1 = null, oldTarget2 = null) => {\n        \n        if(left >= testArray.length - 1){\n            return false\n        }\n\n        let sum = testArray[left] + testArray[right]\n\n        if(oldTarget1 !== null){\n            oldTarget1.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n        if(oldTarget2 !== null){\n            oldTarget2.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n\n        const target1 = document.getElementById(`circle-${left}`)\n        const target2 = document.getElementById(`circle-${right}`)\n\n        target1.style.backgroundColor = \"whitesmoke\"\n        target2.style.backgroundColor = \"whitesmoke\"\n\n        if(sum === total) {\n            const answer1 = document.getElementById(`circle-${left}`)\n            const answer2 = document.getElementById(`circle-${right}`)\n\n            answer1.style.backgroundColor = \"green\"\n            answer2.style.backgroundColor = \"green\"\n            return true\n        } else if(right <= left + 1){\n            setTimeout(() => findSum(left + 1, testArray.length - 1, total, target1, target2), 100)\n        } else{\n            setTimeout(() => findSum(left, right - 1, total, target1, target2), 100)       \n        }\n    }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div>\n            <div className={`flex items-center h-64 grid grid-cols-${rows} grid-flow-row gap-8`}>\n                {testArray.map((value, index) => {\n                    return <ArrayCircle value={value} index={index} />\n                })}\n            </div>\n            <button className=\"hover:bg-gray-200 rounded-xl p-1 float-right\" onClick={() => findSum()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default MultiplePointers\n","import React from 'react'\n\nconst Home = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\n\nconst ArrayBar = (props) => {\n    return (\n        <div id={`bar-${props.index}`} className={`array-bar w-full min-w-0 my-6 mx-1 bg-gray-300`} style={{height: `${props.value}px`}}>\n            {props.value}\n        </div>\n    )\n}\n\nexport default ArrayBar\n","export const getMergeSortAnimations = (array) => {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nconst mergeSortHelper = (mainArray,startIdx,endIdx,auxiliaryArray, animations) => {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nconst doMerge = (mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations) => {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n        } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","export const resetArray = () => {\n    const array = []\n    for(let i = 0; i < randomInt(20, 80); i++){\n        array.push(randomInt(20, 500))\n    }\n    return array\n}\n\nconst randomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}","import React, { useState, useEffect } from 'react'\nimport ArrayBar from './ArrayBar';\nimport {getMergeSortAnimations} from '../helperMethods/MergeSort'\nimport {resetArray} from '../helperMethods/HelperMethods'\n\nconst MergeSort = () => {\n\n    const [testArray, setTestArray] = useState([])\n\n    // Change this value for the speed of the animations.\n    const ANIMATION_SPEED_MS = 20;\n\n    // This is the main color of the array bars.\n    const PRIMARY_COLOR = \"rgb(107, 114, 128)\";\n\n    // This is the color of array bars that are being compared throughout the animations.\n    const SECONDARY_COLOR = \"whitesmoke\";\n\n    // Need to change to more complicated merge sort\n    const mergeSort = () => {\n        const animations = getMergeSortAnimations(testArray);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar')\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx];\n              barOneStyle.style.height = `${newHeight}px`;\n              barOneStyle.innerHTML = `${newHeight}`\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n    useEffect(() => {\n        setTestArray(resetArray())\n    }, [])\n\n    return (\n        <div className=\"flex flex-row\">\n            {testArray.map((value, index) => {\n                return <ArrayBar value={value} index={index} key={index}/>\n            })}\n            <button onClick={() => mergeSort()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default MergeSort\n","import React, { useEffect, useState } from 'react'\nimport {resetArray} from '../helperMethods/HelperMethods'\nimport ArrayBar from './ArrayBar'\n// import { quickSort } from '../helperMethods/QuickSort'\n\nconst QuickSort = () => {\n\n    const [values, setValues] = useState([])\n    const ANIMATION_SPEED = 100\n    async function quickSort(arr, start, end) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(arr, start, end);\n        document.getElementById(`bar-${index}`).style.backgroundColor = \"#D1D5DB\"\n        \n        await Promise.all([\n            quickSort(arr, start, index - 1),\n            quickSort(arr, index + 1, end)\n        ]);\n    }\n    \n    async function partition(arr, start, end) {\n        for (let i = start; i <= end; i++) {\n            document.getElementById(`bar-${i}`).style.backgroundColor = \"#D6FFB7\"\n        }\n        \n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#D1D5DB\"\n            pivotIndex++;\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n            }\n        }\n        await swap(arr, pivotIndex, end);\n        \n        for (let i = start; i < end; i++) {\n            if (i != pivotIndex) {\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n            }\n        }\n        \n        return pivotIndex;\n    }\n    \n    async function swap(arr, a, b) {\n        await sleep(ANIMATION_SPEED);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n    \n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div className=\"flex flex-row\">\n            {values.map((value, index) => {\n                return <ArrayBar value={value} index={index} key={index}/>\n            })}\n            <button onClick={() => quickSort(values, 0, values.length - 1)}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default QuickSort\n","import React, { useState, useEffect } from 'react'\nimport ArrayBar from './ArrayBar'\nimport { resetArray } from '../helperMethods/HelperMethods'\n\nconst BubbleSort = () => {\n\n    const [values, setValues] = useState([])\n\n    const bubbleSort = async () => {\n        \n        for(let i = 0; i < values.length; i++){\n            for(let j = 0; j < values.length; j++ ){\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n                document.getElementById(`bar-${j}`).style.backgroundColor = \"#D1D5DB\"\n                if(values[i] < values[j]){\n                    document.getElementById(`bar-${i}`).style.backgroundColor = \"#E0777D\"\n                    document.getElementById(`bar-${j}`).style.backgroundColor = \"#E0777D\"\n                    await swap(values, i, j)\n                    document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n                    document.getElementById(`bar-${j}`).style.backgroundColor = \"#D1D5DB\"\n                }\n            }\n        }\n    }\n\n    async function swap(arr, a, b) {\n        await sleep(100);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div className=\"flex flex-row\">\n            {values.map((value, index) => {\n                return <ArrayBar key={index} value={value} index={index} />\n            })}\n            <button onClick={() => bubbleSort()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default BubbleSort\n","export class ListNode {\n    constructor(value){\n        this.value = value\n        this.next = null\n        this.prev = null\n    }\n}\n\n\nexport class TreeNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.frequency = 0;\n        this.x = 0;\n        this.y = 0;\n        this.nodeNumberOnBranch = 0;\n    }\n}\n\n\n","import React, { useState, useEffect } from 'react'\nimport { ListNode } from '../helperMethods/DataStructureClasses'\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(value){\n        let newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        }\n        else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this;\n    }\n    pop(){\n        if(!this.head){\n            return undefined\n        }\n\n        let current = this.head\n        let newTail = current\n        while(current.next){\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if(this.length === 0){\n            this.head = null\n            this.tail = null\n        }\n        return current;\n\n    }\n    shift() {\n        if(!this.head){\n            return undefined\n        }\n\n        let oldHead = this.head\n        this.head = oldHead.next\n        this.length--\n\n        return oldHead\n    }\n    unshift(value) {\n        const newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            newNode.next = this.head\n            this.head = newNode\n        }\n\n        this.length ++\n        return this\n    }\n}\n\nconst LinkedList = () => {\n\n    const [list, setList] = useState(new SinglyLinkedList())\n    \n    const push = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0){\n            const value = 1\n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.id = \"node-head\"\n            div.className = \"node\"\n            container.append(div)\n            list.push(value)\n        } else {\n            if(list.length > 1){\n                const oldTail = document.getElementById(\"node-tail\")\n                oldTail.id = `node-${list.tail.value}`\n                oldTail.style.borderColor = \"darkgray\"\n                const lastSpacer = document.getElementById(\"last-spacer\")\n                lastSpacer.id = `spacer-${list.length - 1}`\n            }\n            const value = list.tail.value + 1\n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.id = \"last-spacer\"\n            spacer.className = \"spacer\"\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid lightgreen'\n            div.innerHTML = value\n            div.id = \"node-tail\"\n            div.className = \"node\"\n\n            container.append(spacer)\n            container.append(div)\n            list.push(value)\n        }\n    }\n\n    const pop = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0) {\n            return\n        }\n        list.pop()\n\n        if(list.length === 0){\n            const head = document.getElementById(\"node-head\")\n            container.removeChild(head)\n        }\n        else {\n            const oldTail = document.getElementById(\"node-tail\")\n            container.removeChild(oldTail)\n\n            const oldLastSpacer = document.getElementById(\"last-spacer\")\n            container.removeChild(oldLastSpacer)\n\n            if(list.length !== 1){\n                const newTail = document.getElementById(`node-${list.tail.value}`)\n                newTail.id = \"node-tail\"\n                newTail.style.borderColor = \"lightgreen\"\n    \n                const newLastSpacer = document.getElementById(`spacer-${list.length - 1}`)\n                newLastSpacer.id = \"last-spacer\"\n            }\n        }\n        \n    }\n\n    const shift = () => {\n        if(list.length === 0) return;\n        const container = document.querySelector(\"#node-container\")\n        const oldHead = document.getElementById(\"node-head\")\n        container.removeChild(oldHead)\n        if(list.length > 2){\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            spacers.forEach((spacer, index) => {\n                // debugger\n                if(index === spacers.length - 1){\n                    return;\n                } \n                else {\n                    spacer.id = `spacer-${index}`\n                }\n            })\n\n            const newHead = document.getElementById(`node-${list.head.value + 1}`)\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            // debugger\n            const oldSpacer = document.getElementById(\"spacer-0\")\n            container.removeChild(oldSpacer)\n        }\n        else if(list.length === 2){\n            const newHead = document.getElementById(\"node-tail\")\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            const oldSpacer = document.getElementById(`last-spacer`)\n            container.removeChild(oldSpacer)\n        }\n        list.shift()\n    }\n\n    const unshift = () => {\n        if(list.length === 0) return push()\n        else {\n            const nodes = document.querySelectorAll(\".node\")\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            const container = document.querySelector(\"#node-container\")\n\n            const value = list.head.value - 1\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.className = \"node\"\n            div.id = \"node-head\"\n            \n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.className = \"spacer\"\n\n            if(list.length === 1){\n                spacer.id = \"last-spacer\"\n            }\n            else {\n                spacer.id = `spacer-1`\n            }\n\n            nodes.forEach((node, index) => {\n                node.innerHTML = `${value + index + 1}`\n\n                if(index === nodes.length - 1){\n                    node.style.borderColor = \"lightgreen\"\n                    return;\n                }\n                else {\n                    node.id = `node-${node.innerHTML}`\n                    node.style.borderColor = \"darkgray\"\n                }\n            })\n\n            spacers.forEach((spacer, index) => {\n                if(index === spacers.length - 1){\n                    return;\n                }\n                else {\n                    spacer.id = `spacer-${index + 2}`\n                }\n            })\n\n\n            container.prepend(spacer)\n            container.prepend(div)\n            list.unshift(value)\n        }\n\n    }\n\n    useEffect(() => {\n        list.head = 0\n    }, [])\n\n    return (\n        <div>\n            <div id=\"node-container\" className=\"flex flex-row\">\n\n            </div>\n            <button className=\"ml-2\" onClick={() => push()}> Push</button>\n            <button className=\"ml-2\" onClick={() => pop()}> Pop</button>\n            <button className=\"ml-2\" onClick={() => shift()}> Shift</button>\n            <button className=\"ml-2\" onClick={() => unshift()}> Unshift</button>\n        </div>\n    )\n}\n\nexport default LinkedList\n","export const getXPos = (prevNode, root, left = true) => {\n    \n    const lowerQuartile = Math.floor(window.innerWidth * .9) * .25\n    const upperQuartile = Math.floor(window.innerWidth * .9) * .75\n\n    if(prevNode === root){\n        let xPos\n        left ? xPos = lowerQuartile: xPos = upperQuartile\n        return xPos\n    }\n\n    let xPos\n    const distanceFromPrevNode = (80 - Math.floor((parseInt(prevNode.nodeNumberOnBranch) * 8)))\n\n    if(left){\n        if(distanceFromPrevNode > 0){\n            xPos = prevNode.x - distanceFromPrevNode\n        }\n        else {\n            xPos = prevNode.x - 18\n        }\n    }\n    else {\n        if(distanceFromPrevNode > 0){\n            xPos = prevNode.x + distanceFromPrevNode\n        }\n        else {\n            xPos = prevNode.x + 18\n        }\n    }\n\n    return xPos\n}\n\nexport const drawNode = (value, xPos, yPos, w, color = \"#000000\", startAngle = 1.9 * Math.PI) => {\n    const canvas = document.getElementById(\"tree-canvas\")\n\n    \n    if(canvas.getContext){\n        let ctx = canvas.getContext(\"2d\");\n\n        if(startAngle > 0){\n            ctx.beginPath();\n            ctx.arc(xPos, yPos, w, startAngle, 2 * Math.PI, false);\n            ctx.strokeStyle = color\n            ctx.stroke()\n            setTimeout(() => drawNode(value, xPos, yPos, w, color, startAngle - .1), 20)\n        }\n        else {\n            ctx.beginPath();\n            ctx.arc(xPos, yPos, w, 0, 2 * Math.PI, false);\n            ctx.stroke()\n            ctx.font = '10pt Georgia';\n            ctx.fillStyle = color;\n            ctx.textAlign = 'center';\n            ctx.fillText(value, xPos, yPos + 3);\n        }\n    }\n}\n\nexport const drawConnection = (x1, y1, x2, y2, color = \"#000000\") => {\n\n    const canvas = document.getElementById(\"tree-canvas\")\n    if(canvas.getContext){\n        var ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.strokeStyle = color\n        ctx.stroke(); \n    }\n}\n\nexport const resetCanvas = () => {\n    const canvas = document.getElementById(\"tree-canvas\")\n    if(canvas.getContext){\n        var ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.clearRect(0, 0, window.innerWidth * .9, window.innerHeight * .9);\n        ctx.closePath();\n    }\n}","import React, { useState } from 'react'\nimport { TreeNode } from '../helperMethods/DataStructureClasses'\nimport { drawNode, getXPos, drawConnection, resetCanvas } from '../helperMethods/BinarySearchHelpers';\n\nclass BinaryTree {\n    constructor() {\n        this.root = null;\n    }\n\n    insert(value) {\n        const newNode = new TreeNode(value)\n        const midPoint = Math.floor((window.innerWidth * .9) / 2)\n        if(!this.root) {\n            //location on canvas for root node\n            const xPos = midPoint\n            const yPos = 25\n            const radius = 18\n\n            //assign the node position points so they can be referenced later\n            newNode.x = xPos\n            newNode.y = yPos\n\n            drawNode(value, xPos, yPos, radius)\n\n            this.root = newNode\n            return this\n        }\n\n        this.checkValue(this.root, newNode)\n    }\n\n    checkValue(prevNode, newNode){\n        if(parseInt(prevNode.value) > parseInt(newNode.value)){\n            if(prevNode.left === null){\n                const xPos = getXPos(prevNode, this.root, true)\n                const yPos = prevNode.y + 50\n                const radius = 18\n                \n                //assign the node position points so they can be referenced later\n                newNode.x = xPos\n                newNode.y = yPos\n\n                drawNode(parseInt(newNode.value), xPos, yPos, radius)\n                setTimeout(() => drawConnection(prevNode.x, prevNode.y, xPos, yPos), 1750)\n                prevNode.left = newNode\n                return this\n            }\n            prevNode = prevNode.left\n            newNode.nodeNumberOnBranch += 1\n            setTimeout(() => this.checkValue(prevNode, newNode), 250)\n        }\n\n        else if(parseInt(prevNode.value) < parseInt(newNode.value)){\n            if(prevNode.right === null){\n                const xPos = getXPos(prevNode, this.root, false)\n                const yPos = prevNode.y + 50\n                const radius = 18\n                \n                //assign the node position points so they can be referenced later\n                newNode.x = xPos\n                newNode.y = yPos\n                newNode.nodeNumberOnBranch += 1\n\n                drawNode(parseInt(newNode.value), xPos, yPos, radius)\n                setTimeout(() => drawConnection(prevNode.x, prevNode.y, xPos, yPos), 1750)\n                prevNode.right = newNode\n                return this\n            }\n\n            prevNode = prevNode.right\n            newNode.nodeNumberOnBranch += 1\n            setTimeout(() => this.checkValue(prevNode, newNode), 250)\n        } \n        \n        else {\n            prevNode.frequency += 1\n            return this\n        }\n    }\n\n    find(value, node = this.root){\n        if(!node){\n            alert(`No node with value ${value} was found`)\n            return false\n        }\n\n        if(parseInt(value) === parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#00FF00\")\n            console.log(node.nodeNumberOnBranch)\n            return node\n        }\n        else if(parseInt(value) < parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#ffa500\")\n            if(node.left !== null){\n                setTimeout(() => drawConnection(node.x, node.y, node.left.x, node.left.y, \"#ffa500\"), 1750)\n            }\n            setTimeout(() => this.find(value, node.left), 2000)\n        }\n        else if(parseInt(value) > parseInt(node.value)){\n            drawNode(parseInt(node.value), node.x, node.y, 18, \"#ffa500\")\n            if(node.right !== null){\n                setTimeout(() => drawConnection(node.x, node.y, node.right.x, node.right.y, \"#ffa500\"), 1750)\n            }\n            setTimeout(() => this.find(value, node.right), 2000)\n        }\n        else{\n            return false\n        }\n    }\n}\n\nconst BinarySearchTree = () => {\n\n    const [tree, setTree] = useState(new BinaryTree())\n\n\n    const randomBinaryTree = () => {\n        let i = 0\n        while(i < 100){\n            tree.insert(Math.floor((Math.random() * 100)))\n            i++\n        }\n    }\n\n    const resetTree = () => {\n        setTree(new BinaryTree())\n        resetCanvas()\n    }\n\n    return (\n        <div id=\"binary-tree-page\" className=\"h-screen w-screen\">\n            <canvas id=\"tree-canvas\" className=\"mt-2 ml-2 border-gray-200 border-2\" width={window.innerWidth * .9} height={window.innerHeight * .9} >\n                \n            </canvas>\n            <div className=\"flex flex-row\">\n                <form \n                onSubmit={(event) => {\n                    event.preventDefault()\n                    tree.insert(event.target[0].value)\n                }}>\n                    <input className=\"m-6\" type=\"number\" id=\"value\" placeholder=\"0\"></input>\n                    <button type=\"submit\">\n                        Add\n                    </button>\n                </form>\n                <form \n                onSubmit={(event) => {\n                    event.preventDefault()\n                    tree.find(event.target[0].value)\n                }}>\n                    <input className=\"m-6\" type=\"number\" id=\"value\" placeholder=\"0\"></input>\n                    <button type=\"submit\" >\n                        Find\n                    </button>\n                </form>\n                <button className=\"m-6\" onClick={randomBinaryTree} >\n                    Random Tree\n                </button>\n                <button className=\"m-6\" onClick={resetTree} >\n                    Reset\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree\n","import React from 'react'\nimport MultiplePointers from '../components/MultiplePointers'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from '../components/Home';\nimport MergeSort from '../components/MergeSort';\nimport QuickSort from '../components/QuickSort';\nimport BubbleSort from '../components/BubbleSort';\nimport LinkedList from '../components/SingleLinkedList';\nimport BinarySearchTree from '../components/BinaryTree';\n\nconst Algorithms = () => {\n    \n    return (\n        <div className=\"w-screen\">\n            <Switch>\n                <Route path=\"/\" exact render={() => <Home /> }/>\n                <Route path=\"/multiple-pointers\" exact render={() => <MultiplePointers /> }/> \n                <Route path=\"/merge-sort\" exact render={() => <MergeSort /> }/> \n                <Route path=\"/quick-sort\" exact render={() => <QuickSort /> }/> \n                <Route path=\"/bubble-sort\" exact render={() => <BubbleSort /> }/> \n                <Route path=\"/linked-list\" exact render={() => <LinkedList /> }/>\n                <Route path=\"/binary-tree\" component={BinarySearchTree}/>\n                <Redirect to=\"/\"/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Algorithms\n","import Navbar from './containers/Navbar'\nimport Algorithms from './containers/Algorithms'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div className=\"App h-screen flex flex-row\">\n      <Router>\n        <Navbar />\n        <Algorithms />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}