[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js":"10","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js":"11","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"12","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js":"13","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js":"14","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js":"15","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js":"16","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js":"17","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js":"18","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js":"19"},{"size":321,"mtime":1614799445869,"results":"20","hashOfConfig":"21"},{"size":282,"mtime":1613408831643,"results":"22","hashOfConfig":"21"},{"size":264,"mtime":1612974994946,"results":"23","hashOfConfig":"21"},{"size":186,"mtime":1612205196777,"results":"24","hashOfConfig":"21"},{"size":382,"mtime":1611861683724,"results":"25","hashOfConfig":"21"},{"size":2728,"mtime":1614799259046,"results":"26","hashOfConfig":"21"},{"size":7976,"mtime":1614799259606,"results":"27","hashOfConfig":"21"},{"size":2236,"mtime":1614799335338,"results":"28","hashOfConfig":"21"},{"size":2794,"mtime":1614799349769,"results":"29","hashOfConfig":"21"},{"size":2200,"mtime":1614799366392,"results":"30","hashOfConfig":"21"},{"size":3114,"mtime":1614799377521,"results":"31","hashOfConfig":"21"},{"size":2804,"mtime":1614178112189,"results":"32","hashOfConfig":"21"},{"size":1950,"mtime":1614799429265,"results":"33","hashOfConfig":"21"},{"size":2896,"mtime":1614799403797,"results":"34","hashOfConfig":"21"},{"size":4760,"mtime":1614814725454,"results":"35","hashOfConfig":"21"},{"size":741,"mtime":1614811991719,"results":"36","hashOfConfig":"21"},{"size":518,"mtime":1614698185475,"results":"37","hashOfConfig":"21"},{"size":5643,"mtime":1614806835149,"results":"38","hashOfConfig":"21"},{"size":1373,"mtime":1614813075253,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"egfs8w",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],["82","83"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["84","85"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js",["86","87"],"import React, { useState, useEffect } from 'react'\nimport { ListNode } from '../helperMethods/DataStructureClasses'\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(value){\n        let newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        }\n        else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this;\n    }\n    pop(){\n        if(!this.head){\n            return undefined\n        }\n\n        let current = this.head\n        let newTail = current\n        while(current.next){\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if(this.length === 0){\n            this.head = null\n            this.tail = null\n        }\n        return current;\n\n    }\n    shift() {\n        if(!this.head){\n            return undefined\n        }\n\n        let oldHead = this.head\n        this.head = oldHead.next\n        this.length--\n\n        return oldHead\n    }\n    unshift(value) {\n        const newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            newNode.next = this.head\n            this.head = newNode\n        }\n\n        this.length ++\n        return this\n    }\n}\n\nconst LinkedList = () => {\n\n    const [list, setList] = useState(new SinglyLinkedList())\n    \n    const push = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0){\n            const value = 1\n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.id = \"node-head\"\n            div.className = \"node\"\n            container.append(div)\n            list.push(value)\n        } else {\n            if(list.length > 1){\n                const oldTail = document.getElementById(\"node-tail\")\n                oldTail.id = `node-${list.tail.value}`\n                oldTail.style.borderColor = \"darkgray\"\n                const lastSpacer = document.getElementById(\"last-spacer\")\n                lastSpacer.id = `spacer-${list.length - 1}`\n            }\n            const value = list.tail.value + 1\n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.id = \"last-spacer\"\n            spacer.className = \"spacer\"\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid lightgreen'\n            div.innerHTML = value\n            div.id = \"node-tail\"\n            div.className = \"node\"\n\n            container.append(spacer)\n            container.append(div)\n            list.push(value)\n        }\n    }\n\n    const pop = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0) {\n            return\n        }\n        list.pop()\n\n        if(list.length === 0){\n            const head = document.getElementById(\"node-head\")\n            container.removeChild(head)\n        }\n        else {\n            const oldTail = document.getElementById(\"node-tail\")\n            container.removeChild(oldTail)\n\n            const oldLastSpacer = document.getElementById(\"last-spacer\")\n            container.removeChild(oldLastSpacer)\n\n            if(list.length !== 1){\n                const newTail = document.getElementById(`node-${list.tail.value}`)\n                newTail.id = \"node-tail\"\n                newTail.style.borderColor = \"lightgreen\"\n    \n                const newLastSpacer = document.getElementById(`spacer-${list.length - 1}`)\n                newLastSpacer.id = \"last-spacer\"\n            }\n        }\n        \n    }\n\n    const shift = () => {\n        if(list.length === 0) return;\n        const container = document.querySelector(\"#node-container\")\n        const oldHead = document.getElementById(\"node-head\")\n        container.removeChild(oldHead)\n        if(list.length > 2){\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            spacers.forEach((spacer, index) => {\n                // debugger\n                if(index === spacers.length - 1){\n                    return;\n                } \n                else {\n                    spacer.id = `spacer-${index}`\n                }\n            })\n\n            const newHead = document.getElementById(`node-${list.head.value + 1}`)\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            // debugger\n            const oldSpacer = document.getElementById(\"spacer-0\")\n            container.removeChild(oldSpacer)\n        }\n        else if(list.length === 2){\n            const newHead = document.getElementById(\"node-tail\")\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            const oldSpacer = document.getElementById(`last-spacer`)\n            container.removeChild(oldSpacer)\n        }\n        list.shift()\n    }\n\n    const unshift = () => {\n        if(list.length === 0) return push()\n        else {\n            const nodes = document.querySelectorAll(\".node\")\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            const container = document.querySelector(\"#node-container\")\n\n            const value = list.head.value - 1\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.className = \"node\"\n            div.id = \"node-head\"\n            \n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.className = \"spacer\"\n\n            if(list.length === 1){\n                spacer.id = \"last-spacer\"\n            }\n            else {\n                spacer.id = `spacer-1`\n            }\n\n            nodes.forEach((node, index) => {\n                node.innerHTML = `${value + index + 1}`\n\n                if(index === nodes.length - 1){\n                    node.style.borderColor = \"lightgreen\"\n                    return;\n                }\n                else {\n                    node.id = `node-${node.innerHTML}`\n                    node.style.borderColor = \"darkgray\"\n                }\n            })\n\n            spacers.forEach((spacer, index) => {\n                if(index === spacers.length - 1){\n                    return;\n                }\n                else {\n                    spacer.id = `spacer-${index + 2}`\n                }\n            })\n\n\n            container.prepend(spacer)\n            container.prepend(div)\n            list.unshift(value)\n        }\n\n    }\n\n    useEffect(() => {\n        list.head = 0\n    }, [])\n\n    return (\n        <div>\n            <div id=\"node-container\" className=\"flex flex-row\">\n\n            </div>\n            <button className=\"ml-2\" onClick={() => push()}> Push</button>\n            <button className=\"ml-2\" onClick={() => pop()}> Pop</button>\n            <button className=\"ml-2\" onClick={() => shift()}> Shift</button>\n            <button className=\"ml-2\" onClick={() => unshift()}> Unshift</button>\n        </div>\n    )\n}\n\nexport default LinkedList\n",["88","89"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js",["90"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js",["91"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js",["92"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js",["93","94","95"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"96","replacedBy":"100"},{"ruleId":"98","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":72,"column":18,"nodeType":"104","messageId":"105","endLine":72,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":250,"column":8,"nodeType":"108","endLine":250,"endColumn":10,"suggestions":"109"},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":42,"column":19,"nodeType":"114","messageId":"115","endLine":42,"endColumn":21},{"ruleId":"106","severity":1,"message":"116","line":60,"column":8,"nodeType":"108","endLine":60,"endColumn":10,"suggestions":"117"},{"ruleId":"102","severity":1,"message":"118","line":3,"column":27,"nodeType":"104","messageId":"105","endLine":3,"endColumn":33},{"ruleId":"102","severity":1,"message":"119","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"120","line":82,"column":18,"nodeType":"104","messageId":"105","endLine":82,"endColumn":25},{"ruleId":"102","severity":1,"message":"121","line":83,"column":12,"nodeType":"104","messageId":"105","endLine":83,"endColumn":24},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],["122"],["123"],"no-unused-vars","'setList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'list'. Either include it or remove the dependency array.","ArrayExpression",["124"],["122"],["123"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.",["125"],"'Router' is defined but never used.","'useEffect' is defined but never used.","'setHash' is assigned a value but never used.","'currentColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [list]",{"range":"130","text":"131"},"Update the dependencies array to be: [resetArray]",{"range":"132","text":"133"},[7504,7506],"[list]",[1944,1946],"[resetArray]"]