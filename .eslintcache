[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js":"10","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js":"11","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"12","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js":"13","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js":"14","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js":"15","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js":"16","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js":"17","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js":"18","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js":"19","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Home.js":"20","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Dijkstras.js":"21"},{"size":321,"mtime":1614799445869,"results":"22","hashOfConfig":"23"},{"size":282,"mtime":1613408831643,"results":"24","hashOfConfig":"23"},{"size":264,"mtime":1612974994946,"results":"25","hashOfConfig":"23"},{"size":186,"mtime":1612205196777,"results":"26","hashOfConfig":"23"},{"size":382,"mtime":1611861683724,"results":"27","hashOfConfig":"23"},{"size":2728,"mtime":1614799259046,"results":"28","hashOfConfig":"23"},{"size":7976,"mtime":1614799259606,"results":"29","hashOfConfig":"23"},{"size":2236,"mtime":1614799335338,"results":"30","hashOfConfig":"23"},{"size":2794,"mtime":1614799349769,"results":"31","hashOfConfig":"23"},{"size":2200,"mtime":1614799366392,"results":"32","hashOfConfig":"23"},{"size":3114,"mtime":1614799377521,"results":"33","hashOfConfig":"23"},{"size":2804,"mtime":1614178112189,"results":"34","hashOfConfig":"23"},{"size":1950,"mtime":1614799429265,"results":"35","hashOfConfig":"23"},{"size":2896,"mtime":1614799403797,"results":"36","hashOfConfig":"23"},{"size":4976,"mtime":1614887540239,"results":"37","hashOfConfig":"23"},{"size":741,"mtime":1614811991719,"results":"38","hashOfConfig":"23"},{"size":4795,"mtime":1615214128040,"results":"39","hashOfConfig":"23"},{"size":5643,"mtime":1614806835149,"results":"40","hashOfConfig":"23"},{"size":1373,"mtime":1614813075253,"results":"41","hashOfConfig":"23"},{"size":132,"mtime":1614799259382,"results":"42","hashOfConfig":"23"},{"size":2974,"mtime":1615220742461,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"egfs8w",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],["91","92"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["93","94"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js",[],["95","96"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js",["97","98"],"import React, { useState, useEffect } from 'react'\nimport { ListNode } from '../helperMethods/DataStructureClasses'\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(value){\n        let newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        }\n        else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this;\n    }\n    pop(){\n        if(!this.head){\n            return undefined\n        }\n\n        let current = this.head\n        let newTail = current\n        while(current.next){\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if(this.length === 0){\n            this.head = null\n            this.tail = null\n        }\n        return current;\n\n    }\n    shift() {\n        if(!this.head){\n            return undefined\n        }\n\n        let oldHead = this.head\n        this.head = oldHead.next\n        this.length--\n\n        return oldHead\n    }\n    unshift(value) {\n        const newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            newNode.next = this.head\n            this.head = newNode\n        }\n\n        this.length ++\n        return this\n    }\n}\n\nconst LinkedList = () => {\n\n    const [list, setList] = useState(new SinglyLinkedList())\n    \n    const push = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0){\n            const value = 1\n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.id = \"node-head\"\n            div.className = \"node\"\n            container.append(div)\n            list.push(value)\n        } else {\n            if(list.length > 1){\n                const oldTail = document.getElementById(\"node-tail\")\n                oldTail.id = `node-${list.tail.value}`\n                oldTail.style.borderColor = \"darkgray\"\n                const lastSpacer = document.getElementById(\"last-spacer\")\n                lastSpacer.id = `spacer-${list.length - 1}`\n            }\n            const value = list.tail.value + 1\n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.id = \"last-spacer\"\n            spacer.className = \"spacer\"\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid lightgreen'\n            div.innerHTML = value\n            div.id = \"node-tail\"\n            div.className = \"node\"\n\n            container.append(spacer)\n            container.append(div)\n            list.push(value)\n        }\n    }\n\n    const pop = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0) {\n            return\n        }\n        list.pop()\n\n        if(list.length === 0){\n            const head = document.getElementById(\"node-head\")\n            container.removeChild(head)\n        }\n        else {\n            const oldTail = document.getElementById(\"node-tail\")\n            container.removeChild(oldTail)\n\n            const oldLastSpacer = document.getElementById(\"last-spacer\")\n            container.removeChild(oldLastSpacer)\n\n            if(list.length !== 1){\n                const newTail = document.getElementById(`node-${list.tail.value}`)\n                newTail.id = \"node-tail\"\n                newTail.style.borderColor = \"lightgreen\"\n    \n                const newLastSpacer = document.getElementById(`spacer-${list.length - 1}`)\n                newLastSpacer.id = \"last-spacer\"\n            }\n        }\n        \n    }\n\n    const shift = () => {\n        if(list.length === 0) return;\n        const container = document.querySelector(\"#node-container\")\n        const oldHead = document.getElementById(\"node-head\")\n        container.removeChild(oldHead)\n        if(list.length > 2){\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            spacers.forEach((spacer, index) => {\n                // debugger\n                if(index === spacers.length - 1){\n                    return;\n                } \n                else {\n                    spacer.id = `spacer-${index}`\n                }\n            })\n\n            const newHead = document.getElementById(`node-${list.head.value + 1}`)\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            // debugger\n            const oldSpacer = document.getElementById(\"spacer-0\")\n            container.removeChild(oldSpacer)\n        }\n        else if(list.length === 2){\n            const newHead = document.getElementById(\"node-tail\")\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            const oldSpacer = document.getElementById(`last-spacer`)\n            container.removeChild(oldSpacer)\n        }\n        list.shift()\n    }\n\n    const unshift = () => {\n        if(list.length === 0) return push()\n        else {\n            const nodes = document.querySelectorAll(\".node\")\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            const container = document.querySelector(\"#node-container\")\n\n            const value = list.head.value - 1\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.className = \"node\"\n            div.id = \"node-head\"\n            \n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.className = \"spacer\"\n\n            if(list.length === 1){\n                spacer.id = \"last-spacer\"\n            }\n            else {\n                spacer.id = `spacer-1`\n            }\n\n            nodes.forEach((node, index) => {\n                node.innerHTML = `${value + index + 1}`\n\n                if(index === nodes.length - 1){\n                    node.style.borderColor = \"lightgreen\"\n                    return;\n                }\n                else {\n                    node.id = `node-${node.innerHTML}`\n                    node.style.borderColor = \"darkgray\"\n                }\n            })\n\n            spacers.forEach((spacer, index) => {\n                if(index === spacers.length - 1){\n                    return;\n                }\n                else {\n                    spacer.id = `spacer-${index + 2}`\n                }\n            })\n\n\n            container.prepend(spacer)\n            container.prepend(div)\n            list.unshift(value)\n        }\n\n    }\n\n    useEffect(() => {\n        list.head = 0\n    }, [])\n\n    return (\n        <div>\n            <div id=\"node-container\" className=\"flex flex-row\">\n\n            </div>\n            <button className=\"ml-2\" onClick={() => push()}> Push</button>\n            <button className=\"ml-2\" onClick={() => pop()}> Pop</button>\n            <button className=\"ml-2\" onClick={() => shift()}> Shift</button>\n            <button className=\"ml-2\" onClick={() => unshift()}> Unshift</button>\n        </div>\n    )\n}\n\nexport default LinkedList\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js",["99"],"import React, { useEffect, useState } from 'react'\nimport {resetArray} from '../helperMethods/HelperMethods'\nimport ArrayBar from '../components/ArrayBar'\n// import { quickSort } from '../helperMethods/QuickSort'\n\nconst QuickSort = () => {\n\n    const [values, setValues] = useState([])\n    const ANIMATION_SPEED = 100\n    async function quickSort(arr, start, end) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(arr, start, end);\n        document.getElementById(`bar-${index}`).style.backgroundColor = \"#D1D5DB\"\n        \n        await Promise.all([\n            quickSort(arr, start, index - 1),\n            quickSort(arr, index + 1, end)\n        ]);\n    }\n    \n    async function partition(arr, start, end) {\n        for (let i = start; i <= end; i++) {\n            document.getElementById(`bar-${i}`).style.backgroundColor = \"#D6FFB7\"\n        }\n        \n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#D1D5DB\"\n            pivotIndex++;\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n            }\n        }\n        await swap(arr, pivotIndex, end);\n        \n        for (let i = start; i < end; i++) {\n            if (i != pivotIndex) {\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n            }\n        }\n        \n        return pivotIndex;\n    }\n    \n    async function swap(arr, a, b) {\n        await sleep(ANIMATION_SPEED);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n    \n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                {values.map((value, index) => {\n                    return <ArrayBar value={value} index={index} key={index}/>\n                })}\n            </div>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\"  onClick={() => quickSort(values, 0, values.length - 1)}>\n                Run Quick Sort\n            </button>\n        </div>\n    )\n}\n\nexport default QuickSort\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js",["100"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js",["101"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js",["102","103","104"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js",["105"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Home.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Dijkstras.js",["106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"107","replacedBy":"113"},{"ruleId":"109","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":72,"column":18,"nodeType":"117","messageId":"118","endLine":72,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":250,"column":8,"nodeType":"121","endLine":250,"endColumn":10,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":42,"column":19,"nodeType":"125","messageId":"126","endLine":42,"endColumn":21},{"ruleId":"119","severity":1,"message":"127","line":60,"column":8,"nodeType":"121","endLine":60,"endColumn":10,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":3,"column":27,"nodeType":"117","messageId":"118","endLine":3,"endColumn":33},{"ruleId":"115","severity":1,"message":"130","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"131","line":82,"column":18,"nodeType":"117","messageId":"118","endLine":82,"endColumn":25},{"ruleId":"115","severity":1,"message":"132","line":83,"column":12,"nodeType":"117","messageId":"118","endLine":83,"endColumn":24},{"ruleId":"115","severity":1,"message":"133","line":100,"column":7,"nodeType":"117","messageId":"118","endLine":100,"endColumn":12},{"ruleId":"115","severity":1,"message":"134","line":70,"column":15,"nodeType":"117","messageId":"118","endLine":70,"endColumn":20},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],["135"],["136"],["135"],["136"],"no-unused-vars","'setList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'list'. Either include it or remove the dependency array.","ArrayExpression",["137"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.",["138"],"'Router' is defined but never used.","'useEffect' is defined but never used.","'setHash' is assigned a value but never used.","'currentColor' is assigned a value but never used.","'Graph' is defined but never used.","'graph' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [list]",{"range":"143","text":"144"},"Update the dependencies array to be: [resetArray]",{"range":"145","text":"146"},[7504,7506],"[list]",[1944,1946],"[resetArray]"]