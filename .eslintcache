[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"10","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js":"11","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/QuickSort.js":"12","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/QuickSort.js":"13","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/BubbleSort.js":"14","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/SingleLinkedList.js":"15","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js":"16","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/BinaryTree.js":"17","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/BinarySearchHelpers.js":"18"},{"size":343,"mtime":1614180350130,"results":"19","hashOfConfig":"20"},{"size":186,"mtime":1612205196777,"results":"21","hashOfConfig":"20"},{"size":1619,"mtime":1614613047830,"results":"22","hashOfConfig":"20"},{"size":3144,"mtime":1614701892651,"results":"23","hashOfConfig":"20"},{"size":132,"mtime":1614180942868,"results":"24","hashOfConfig":"20"},{"size":2486,"mtime":1614702345484,"results":"25","hashOfConfig":"20"},{"size":382,"mtime":1611861683724,"results":"26","hashOfConfig":"20"},{"size":2224,"mtime":1614698961276,"results":"27","hashOfConfig":"20"},{"size":282,"mtime":1613408831643,"results":"28","hashOfConfig":"20"},{"size":2804,"mtime":1614178112189,"results":"29","hashOfConfig":"20"},{"size":264,"mtime":1612974994946,"results":"30","hashOfConfig":"20"},{"size":2782,"mtime":1614698965939,"results":"31","hashOfConfig":"20"},{"size":1093,"mtime":1612974897612,"results":"32","hashOfConfig":"20"},{"size":2086,"mtime":1614699071726,"results":"33","hashOfConfig":"20"},{"size":7976,"mtime":1614265116109,"results":"34","hashOfConfig":"20"},{"size":380,"mtime":1614369845923,"results":"35","hashOfConfig":"20"},{"size":5636,"mtime":1614700235598,"results":"36","hashOfConfig":"20"},{"size":2352,"mtime":1614700169068,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1n5k89m",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],["83","84"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["85","86"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js",["87"],"import React from 'react'\nimport MultiplePointers from '../components/MultiplePointers'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from '../components/Home';\nimport MergeSort from '../components/MergeSort';\nimport QuickSort from '../components/QuickSort';\nimport BubbleSort from '../components/BubbleSort';\nimport LinkedList from '../components/SingleLinkedList';\nimport BinarySearchTree from '../components/BinaryTree';\n\nconst Algorithms = () => {\n    \n    return (\n        <div className=\"w-screen\">\n            <Switch>\n                <Route path=\"/\" exact render={() => <Home />}/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer\" exact render={() => <Home /> }/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/multiple-pointers\" exact render={() => <MultiplePointers /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/merge-sort\" exact render={() => <MergeSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/quick-sort\" exact render={() => <QuickSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/bubble-sort\" exact render={() => <BubbleSort /> }/> \n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/linked-list\" exact render={() => <LinkedList /> }/>\n                <Route path=\"/DataStructure-and-Algorithm-Visualizer/binary-tree\" component={BinarySearchTree}/>\n                <Redirect to=\"/DataStructure-and-Algorithm-Visualizer\"/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Algorithms\n",["88","89"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js",["90","91"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js",["92"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],["93","94"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],["95","96"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/QuickSort.js",["97"],"import React, { useEffect, useState } from 'react'\nimport {resetArray} from '../helperMethods/HelperMethods'\nimport ArrayBar from './ArrayBar'\n// import { quickSort } from '../helperMethods/QuickSort'\n\nconst QuickSort = () => {\n\n    const [values, setValues] = useState([])\n    const ANIMATION_SPEED = 100\n    async function quickSort(arr, start, end) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(arr, start, end);\n        document.getElementById(`bar-${index}`).style.backgroundColor = \"#D1D5DB\"\n        \n        await Promise.all([\n            quickSort(arr, start, index - 1),\n            quickSort(arr, index + 1, end)\n        ]);\n    }\n    \n    async function partition(arr, start, end) {\n        for (let i = start; i <= end; i++) {\n            document.getElementById(`bar-${i}`).style.backgroundColor = \"#D6FFB7\"\n        }\n        \n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#D1D5DB\"\n            pivotIndex++;\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n            }\n        }\n        await swap(arr, pivotIndex, end);\n        \n        for (let i = start; i < end; i++) {\n            if (i != pivotIndex) {\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n            }\n        }\n        \n        return pivotIndex;\n    }\n    \n    async function swap(arr, a, b) {\n        await sleep(ANIMATION_SPEED);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n    \n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                {values.map((value, index) => {\n                    return <ArrayBar value={value} index={index} key={index}/>\n                })}\n            </div>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\"  onClick={() => quickSort(values, 0, values.length - 1)}>\n                Run Quick Sort\n            </button>\n        </div>\n    )\n}\n\nexport default QuickSort\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/QuickSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/BubbleSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/SingleLinkedList.js",["98","99"],"import React, { useState, useEffect } from 'react'\nimport { ListNode } from '../helperMethods/DataStructureClasses'\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(value){\n        let newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        }\n        else {\n            this.tail.next = newNode\n            this.tail = newNode\n        }\n        this.length++\n        return this;\n    }\n    pop(){\n        if(!this.head){\n            return undefined\n        }\n\n        let current = this.head\n        let newTail = current\n        while(current.next){\n            newTail = current\n            current = current.next\n        }\n        this.tail = newTail\n        this.tail.next = null\n        this.length--\n        if(this.length === 0){\n            this.head = null\n            this.tail = null\n        }\n        return current;\n\n    }\n    shift() {\n        if(!this.head){\n            return undefined\n        }\n\n        let oldHead = this.head\n        this.head = oldHead.next\n        this.length--\n\n        return oldHead\n    }\n    unshift(value) {\n        const newNode = new ListNode(value)\n        if(!this.head){\n            this.head = newNode\n            this.tail = this.head\n        } else {\n            newNode.next = this.head\n            this.head = newNode\n        }\n\n        this.length ++\n        return this\n    }\n}\n\nconst LinkedList = () => {\n\n    const [list, setList] = useState(new SinglyLinkedList())\n    \n    const push = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0){\n            const value = 1\n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.id = \"node-head\"\n            div.className = \"node\"\n            container.append(div)\n            list.push(value)\n        } else {\n            if(list.length > 1){\n                const oldTail = document.getElementById(\"node-tail\")\n                oldTail.id = `node-${list.tail.value}`\n                oldTail.style.borderColor = \"darkgray\"\n                const lastSpacer = document.getElementById(\"last-spacer\")\n                lastSpacer.id = `spacer-${list.length - 1}`\n            }\n            const value = list.tail.value + 1\n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.id = \"last-spacer\"\n            spacer.className = \"spacer\"\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid lightgreen'\n            div.innerHTML = value\n            div.id = \"node-tail\"\n            div.className = \"node\"\n\n            container.append(spacer)\n            container.append(div)\n            list.push(value)\n        }\n    }\n\n    const pop = () => {\n        const container = document.querySelector(\"#node-container\")\n        if(list.length === 0) {\n            return\n        }\n        list.pop()\n\n        if(list.length === 0){\n            const head = document.getElementById(\"node-head\")\n            container.removeChild(head)\n        }\n        else {\n            const oldTail = document.getElementById(\"node-tail\")\n            container.removeChild(oldTail)\n\n            const oldLastSpacer = document.getElementById(\"last-spacer\")\n            container.removeChild(oldLastSpacer)\n\n            if(list.length !== 1){\n                const newTail = document.getElementById(`node-${list.tail.value}`)\n                newTail.id = \"node-tail\"\n                newTail.style.borderColor = \"lightgreen\"\n    \n                const newLastSpacer = document.getElementById(`spacer-${list.length - 1}`)\n                newLastSpacer.id = \"last-spacer\"\n            }\n        }\n        \n    }\n\n    const shift = () => {\n        if(list.length === 0) return;\n        const container = document.querySelector(\"#node-container\")\n        const oldHead = document.getElementById(\"node-head\")\n        container.removeChild(oldHead)\n        if(list.length > 2){\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            spacers.forEach((spacer, index) => {\n                // debugger\n                if(index === spacers.length - 1){\n                    return;\n                } \n                else {\n                    spacer.id = `spacer-${index}`\n                }\n            })\n\n            const newHead = document.getElementById(`node-${list.head.value + 1}`)\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            // debugger\n            const oldSpacer = document.getElementById(\"spacer-0\")\n            container.removeChild(oldSpacer)\n        }\n        else if(list.length === 2){\n            const newHead = document.getElementById(\"node-tail\")\n            newHead.style.borderColor = \"blue\"\n            newHead.id = \"node-head\"\n            const oldSpacer = document.getElementById(`last-spacer`)\n            container.removeChild(oldSpacer)\n        }\n        list.shift()\n    }\n\n    const unshift = () => {\n        if(list.length === 0) return push()\n        else {\n            const nodes = document.querySelectorAll(\".node\")\n            const spacers = document.querySelectorAll(\".spacer\")\n\n            const container = document.querySelector(\"#node-container\")\n\n            const value = list.head.value - 1\n            \n            const div = document.createElement(\"div\")\n            div.style.marginLeft = \"1%\"\n            div.style.borderRadius = \"50%\"\n            div.style.padding = \"1%\"\n            div.style.border = '2px solid blue'\n            div.innerHTML = value\n            div.className = \"node\"\n            div.id = \"node-head\"\n            \n            const spacer = document.createElement(\"div\")\n            spacer.innerHTML = \"-->\"\n            spacer.style.textAlign = \"center\"\n            spacer.style.marginTop = \"1%\"\n            spacer.style.marginLeft = \"1%\"\n            spacer.className = \"spacer\"\n\n            if(list.length === 1){\n                spacer.id = \"last-spacer\"\n            }\n            else {\n                spacer.id = `spacer-1`\n            }\n\n            nodes.forEach((node, index) => {\n                node.innerHTML = `${value + index + 1}`\n\n                if(index === nodes.length - 1){\n                    node.style.borderColor = \"lightgreen\"\n                    return;\n                }\n                else {\n                    node.id = `node-${node.innerHTML}`\n                    node.style.borderColor = \"darkgray\"\n                }\n            })\n\n            spacers.forEach((spacer, index) => {\n                if(index === spacers.length - 1){\n                    return;\n                }\n                else {\n                    spacer.id = `spacer-${index + 2}`\n                }\n            })\n\n\n            container.prepend(spacer)\n            container.prepend(div)\n            list.unshift(value)\n        }\n\n    }\n\n    useEffect(() => {\n        list.head = 0\n    }, [])\n\n    return (\n        <div>\n            <div id=\"node-container\" className=\"flex flex-row\">\n\n            </div>\n            <button className=\"ml-2\" onClick={() => push()}> Push</button>\n            <button className=\"ml-2\" onClick={() => pop()}> Pop</button>\n            <button className=\"ml-2\" onClick={() => shift()}> Shift</button>\n            <button className=\"ml-2\" onClick={() => unshift()}> Unshift</button>\n        </div>\n    )\n}\n\nexport default LinkedList\n",["100","101"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/BinaryTree.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/BinarySearchHelpers.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":27,"nodeType":"110","messageId":"111","endLine":3,"endColumn":33},{"ruleId":"102","replacedBy":"112"},{"ruleId":"104","replacedBy":"113"},{"ruleId":"108","severity":1,"message":"114","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":61,"column":8,"nodeType":"117","endLine":61,"endColumn":10,"suggestions":"118"},{"ruleId":"108","severity":1,"message":"119","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"102","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"102","replacedBy":"122"},{"ruleId":"104","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":42,"column":19,"nodeType":"126","messageId":"127","endLine":42,"endColumn":21},{"ruleId":"108","severity":1,"message":"128","line":72,"column":18,"nodeType":"110","messageId":"111","endLine":72,"endColumn":25},{"ruleId":"115","severity":1,"message":"129","line":250,"column":8,"nodeType":"117","endLine":250,"endColumn":10,"suggestions":"130"},{"ruleId":"102","replacedBy":"131"},{"ruleId":"104","replacedBy":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["133"],["134"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar",["133"],["134"],"'Navbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["135"],"'useState' is defined but never used.",["133"],["134"],["133"],["134"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'list'. Either include it or remove the dependency array.",["136"],["133"],["134"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [resetArray]",{"range":"141","text":"142"},"Update the dependencies array to be: [list]",{"range":"143","text":"144"},[1974,1976],"[resetArray]",[7504,7506],"[list]"]