[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js":"10","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js":"11","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"12","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js":"13","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js":"14","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js":"15","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js":"16","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js":"17","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js":"18","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js":"19","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Dijkstras.js":"20","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/BinarySearchAnimations.js":"21","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/node.js":"22","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Node.js":"23","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/NodeRow.js":"24"},{"size":321,"mtime":1614799445869,"results":"25","hashOfConfig":"26"},{"size":282,"mtime":1613408831643,"results":"27","hashOfConfig":"26"},{"size":264,"mtime":1612974994946,"results":"28","hashOfConfig":"26"},{"size":186,"mtime":1612205196777,"results":"29","hashOfConfig":"26"},{"size":382,"mtime":1611861683724,"results":"30","hashOfConfig":"26"},{"size":2728,"mtime":1614799259046,"results":"31","hashOfConfig":"26"},{"size":7991,"mtime":1615396948919,"results":"32","hashOfConfig":"26"},{"size":2236,"mtime":1614799335338,"results":"33","hashOfConfig":"26"},{"size":2794,"mtime":1614799349769,"results":"34","hashOfConfig":"26"},{"size":2200,"mtime":1614799366392,"results":"35","hashOfConfig":"26"},{"size":3114,"mtime":1614799377521,"results":"36","hashOfConfig":"26"},{"size":2804,"mtime":1614178112189,"results":"37","hashOfConfig":"26"},{"size":1924,"mtime":1615231829998,"results":"38","hashOfConfig":"26"},{"size":3115,"mtime":1615132292487,"results":"39","hashOfConfig":"26"},{"size":4976,"mtime":1614887540239,"results":"40","hashOfConfig":"26"},{"size":741,"mtime":1614811991719,"results":"41","hashOfConfig":"26"},{"size":4795,"mtime":1615214128040,"results":"42","hashOfConfig":"26"},{"size":5643,"mtime":1614806835149,"results":"43","hashOfConfig":"26"},{"size":1373,"mtime":1614813075253,"results":"44","hashOfConfig":"26"},{"size":6920,"mtime":1615327974070,"results":"45","hashOfConfig":"26"},{"size":2352,"mtime":1614806833921,"results":"46","hashOfConfig":"26"},{"size":674,"mtime":1615233631476,"results":"47","hashOfConfig":"26"},{"size":804,"mtime":1615326462692,"results":"48","hashOfConfig":"26"},{"size":591,"mtime":1615306641253,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"egfs8w",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],["111","112"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],["113","114"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HelperMethods.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["115","116"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],["117","118"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryHeap.js",[],["119","120"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/SingleLinkedList.js",["121","122"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MergeSort.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/QuickSort.js",["123"],"import React, { useEffect, useState } from 'react'\nimport {resetArray} from '../helperMethods/HelperMethods'\nimport ArrayBar from '../components/ArrayBar'\n// import { quickSort } from '../helperMethods/QuickSort'\n\nconst QuickSort = () => {\n\n    const [values, setValues] = useState([])\n    const ANIMATION_SPEED = 100\n    async function quickSort(arr, start, end) {\n        if (start >= end) {\n            return;\n        }\n        let index = await partition(arr, start, end);\n        document.getElementById(`bar-${index}`).style.backgroundColor = \"#D1D5DB\"\n        \n        await Promise.all([\n            quickSort(arr, start, index - 1),\n            quickSort(arr, index + 1, end)\n        ]);\n    }\n    \n    async function partition(arr, start, end) {\n        for (let i = start; i <= end; i++) {\n            document.getElementById(`bar-${i}`).style.backgroundColor = \"#D6FFB7\"\n        }\n        \n        let pivotValue = arr[end];\n        let pivotIndex = start;\n        document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#D1D5DB\"\n            pivotIndex++;\n            document.getElementById(`bar-${pivotIndex}`).style.backgroundColor = \"#E0777D\"\n            }\n        }\n        await swap(arr, pivotIndex, end);\n        \n        for (let i = start; i < end; i++) {\n            if (i != pivotIndex) {\n                document.getElementById(`bar-${i}`).style.backgroundColor = \"#D1D5DB\"\n            }\n        }\n        \n        return pivotIndex;\n    }\n    \n    async function swap(arr, a, b) {\n        await sleep(ANIMATION_SPEED);\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n        const element1 = document.getElementById(`bar-${a}`)\n        element1.style.height = `${arr[a]}px`\n        element1.innerHTML = arr[a]\n\n        const element2 = document.getElementById(`bar-${b}`)\n        element2.style.height = `${arr[b]}px`\n        element2.innerHTML = arr[b]\n    }\n    \n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    useEffect(() => {\n        setValues(resetArray())\n    }, [])\n\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                {values.map((value, index) => {\n                    return <ArrayBar value={value} index={index} key={index}/>\n                })}\n            </div>\n            <button className=\"m-6 bg-gray-300 rounded hover:bg-gray-100 pl-2 pr-2\"  onClick={() => quickSort(values, 0, values.length - 1)}>\n                Run Quick Sort\n            </button>\n        </div>\n    )\n}\n\nexport default QuickSort\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BubbleSort.js",[],["124","125"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/MultiplePointers.js",["126"],"import React, {useState, useEffect} from 'react'\nimport ArrayCircle from '../components/ArrayCircle'\n\nconst MultiplePointers = () => {\n\n    const [testArray, setTestArray] = useState([])\n    const [rows, setRows] = useState(1)\n\n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(10, 50); i++){\n            array.push(randomInt(20, 75))\n        }\n        setTestArray(array)\n        const rowNum = Math.floor(array.length / 5)\n        setRows(rowNum)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    const findSum = (total = 100, left = 0, right = testArray.length - 1, oldTarget1 = null, oldTarget2 = null) => {\n\n        if(left >= testArray.length - 1){\n            return false\n        }\n\n        let sum = testArray[left] + testArray[right]\n\n        if(oldTarget1 !== null){\n            oldTarget1.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n        if(oldTarget2 !== null){\n            oldTarget2.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n\n        const target1 = document.getElementById(`circle-${left}`)\n        const target2 = document.getElementById(`circle-${right}`)\n\n        target1.style.backgroundColor = \"whitesmoke\"\n        target2.style.backgroundColor = \"whitesmoke\"\n\n        if(sum === parseInt(total)) {\n            const answer1 = document.getElementById(`circle-${left}`)\n            const answer2 = document.getElementById(`circle-${right}`)\n\n            answer1.style.backgroundColor = \"green\"\n            answer2.style.backgroundColor = \"green\"\n            return true\n        } else if(right <= left + 1){\n            setTimeout(() => findSum(total, left + 1, testArray.length - 1, target1, target2), 100)\n        } else{\n            setTimeout(() => findSum(total, left, right - 1, target1, target2), 100)       \n        }\n    }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div>\n            <div className=\"w-full mt-6 mb-6 text-center shadow\">See if the sum of any two numbers in an array add up to a selected total</div>\n            <form className=\"w-full grid grid-cols-4 gap-4 justify-items-center\" onSubmit={(event) => {\n                event.preventDefault()\n                if(event.target[0].value !== \"\"){\n                    findSum(event.target[0].value)\n                }\n                else{\n                    findSum()\n                }\n            }}>\n                <input type=\"number\" placeholder=\"default 100\" className=\"col-start-2 border-2 rounded border-gray-200\"/>\n                <button type=\"submit\" className=\"col-start-3 bg-gray-300 hover:bg-gray-100 rounded-xl p-1 float-right\" >\n                    Run Multiple Pointers\n                </button>\n            </form>\n            <div className={`flex items-center h-64 grid grid-cols-${rows} grid-flow-row gap-8`}>\n                {testArray.map((value, index) => {\n                    return <ArrayCircle value={value} index={index} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default MultiplePointers\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],["127","128"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Algorithms.js",["129"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/Navbar.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/HashMap.js",["130","131","132"],"import React, { useState, useEffect } from 'react'\nimport HashBox from '../components/HashBox';\nimport { addToBox, addMessage } from '../helperMethods/HashMapAnimations';\n\nclass HashTable {\n\n    constructor(size=6){\n        const array = []\n        for(let i = 0; i < size; i++){\n            array.push(null)\n        }\n        this.keyMap = array\n    }\n\n    hash(key) {\n        let total = 0;\n        let primeNumber = 31;\n        for (let i = 0; i < Math.min(key.length, 50); i++) {\n            let char = key[i];\n            let value = char.charCodeAt(0) - 96\n            total = (total * primeNumber + value) % this.keyMap.length;\n        }\n        return total;\n    }\n\n    set(key, value){\n        const index = this.hash(key)\n\n        if(!this.keyMap[index]){\n            this.keyMap[index] = [[key,value]]\n            addToBox(index, key, value)\n        } else {\n            this.keyMap[index].push([key,value])\n            addToBox(index, key, value)\n        }\n    }\n\n    get(key){\n        const index = this.hash(key)\n        let value\n        if(!this.keyMap[index]) {\n            return undefined\n        }\n        const box = document.getElementById(`box-${index}`)\n        box.style.borderColor = \"orange\"\n\n        if(this.keyMap[index].length >= 1) {\n            value = this.getElement(index, key, 0, this.keyMap[index].length)\n        }\n\n        setTimeout(() => box.style.borderColor = \"black\", 5000)\n        return value\n    }\n\n    getElement(index, key, i, length) {\n        if(i < length){  \n            const check = document.getElementById(`box-${index}-element-${i}`)\n            check.style.border = \"2px solid orange\"\n            check.style.backgroundColor = \"white\"\n            if(this.keyMap[index][i][0] === key){\n                check.style.borderColor = \"green\"\n                setTimeout(() => {\n                    check.style.border = \"\"\n                    check.style.backgroundColor = this.keyMap[index][i][0]\n                    addMessage(`The value found for key:${key} was ${this.keyMap[index][i][1]}`)\n                }, 1000)\n                return this.keyMap[index][i][1]\n            }\n            else {\n                setTimeout(() => {\n                    check.style.border = \"\"\n                    check.style.backgroundColor = this.keyMap[index][i][0]\n                    this.getElement(index, key, i + 1, length)\n                }, 1000)\n            }\n        }\n        else return undefined\n    }\n}\n\nconst HashMap = () => {\n    const [hash, setHash] = useState(new HashTable())\n    const [currentColor, setcurrentColor] = useState(['black', '#000000'])\n\n    const x = 6 % 2\n    const y = x ? 'one' : 'two'\n    console.log(y)\n    const handleSetHash = (event) => {\n        event.preventDefault()\n        const key = event.target[0].value\n        const value = event.target[1].value\n        if(key !== \"\" && value!== \"\") {\n            setcurrentColor([key, value])\n            hash.set(key, value)\n        }\n        else{\n            alert(\"You must enter a color and hex color\")\n        }\n    }\n\n    const handleGetHash = (event) => {\n        event.preventDefault()\n        const key = event.target[0].value\n\n        if(key !== \"\"){\n            if(hash.get(key)){\n                setcurrentColor([key, hash.get(key)])\n            }\n        }\n    }\n\n    return (\n        <div className=\"w-full h-screen\" >\n            <div className=\"h-5/6\">\n                <div className=\"text-center shadow m-2 bg-white\">\n                    Hashmap Using Separate Chaining\n                </div>\n                <div className=\"text-center m-2 bg-white\">\n                    (enter any key, but best with colors)\n                </div>\n                <div id=\"hash-map-container\" className=\"w-full h-4/6 p-2 flex flex-row\">\n                    [{hash.keyMap.map((element, index) => {\n                        return <HashBox element={element} index={index} key={index}/>\n                    })}]\n                </div>\n                <div id=\"message-board\" className=\"h-1/4 m-2 w-full rounded-sm border-2 border-gray-200 overflow-auto\"> \n\n                </div>\n            </div>\n            <div className=\"flex flex-row bg-gray-100 rounded m-2\">\n                <form className=\"m-2 w-4/6\" onSubmit={(e) => handleSetHash(e)}>\n                    <input className=\"m-2 w-1/3\" type=\"text\" placeholder=\"Enter a key, ex: red\"/>\n                    <input className=\"m-2 w-1/3\" type=\"text\" placeholder=\"Enter a value, ex: #FF0000\"/>\n                    <button className=\"bg-gray-300 hover:bg-white pl-2 pr-2 rounded m-6\" type=\"submit\">Set</button>\n                </form>\n                <form className=\"m-2\" onSubmit={(e) => handleGetHash(e)}>\n                    <input className=\"m-6\" type=\"text\" placeholder=\"Enter a key\"/>\n                    <button className=\"bg-gray-300 hover:bg-white pl-2 pr-2 rounded m-6\" type=\"submit\">Get</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default HashMap\n",["133","134"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/HashBox.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/DataStructureClasses.js",["135"],"export class ListNode {\n    constructor(value){\n        this.value = value\n        this.next = null\n        this.prev = null\n    }\n}\n\n\nexport class TreeNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.frequency = 0;\n        this.x = 0;\n        this.y = 0;\n        this.nodeNumberOnBranch = 0;\n    }\n}\n\nexport class HeapNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null; \n    }\n}\n\nexport class PathfindingNode {\n    constructor(val, priority){\n        this.val = val;\n        this.priority = priority;\n    }\n}\n\nexport class PriorityQueue {\n    constructor(){\n        this.values = [];\n    }\n    enqueue(val, priority){\n        let newNode = new Node(val, priority);\n        this.values.push(newNode);\n        this.bubbleUp();\n    }\n    bubbleUp(){\n        let idx = this.values.length - 1;\n        const element = this.values[idx];\n        while(idx > 0){\n            let parentIdx = Math.floor((idx - 1)/2);\n            let parent = this.values[parentIdx];\n            if(element.priority >= parent.priority) break;\n            this.values[parentIdx] = element;\n            this.values[idx] = parent;\n            idx = parentIdx;\n        }\n    }\n    dequeue(){\n        const min = this.values[0];\n        const end = this.values.pop();\n        if(this.values.length > 0){\n            this.values[0] = end;\n            this.sinkDown();\n        }\n        return min;\n    }\n    sinkDown(){\n        let idx = 0;\n        const length = this.values.length;\n        const element = this.values[0];\n        while(true){\n            let leftChildIdx = 2 * idx + 1;\n            let rightChildIdx = 2 * idx + 2;\n            let leftChild,rightChild;\n            let swap = null;\n\n            if(leftChildIdx < length){\n                leftChild = this.values[leftChildIdx];\n                if(leftChild.priority < element.priority) {\n                    swap = leftChildIdx;\n                }\n            }\n            if(rightChildIdx < length){\n                rightChild = this.values[rightChildIdx];\n                if(\n                    (swap === null && rightChild.priority < element.priority) || \n                    (swap !== null && rightChild.priority < leftChild.priority)\n                ) {\n                   swap = rightChildIdx;\n                }\n            }\n            if(swap === null) break;\n            this.values[idx] = this.values[swap];\n            this.values[swap] = element;\n            idx = swap;\n        }\n    }\n}\n\nclass Graph {\n    constructor(){\n           this.adjacencyList = {};\n    }\n\n    addVertex(vertex){\n        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = []\n    }\n\n    addEdge(vertex1, vertex2) {\n        this.adjacencyList[vertex1].push(vertex2)\n        this.adjacencyList[vertex2].push(vertex1)\n    }\n\n    removeEdge(vertex1, vertex2) {\n        let array = []\n        for(let i = 0; i < this.adjacencyList[vertex1]; i++){\n            if(this.adjacencyList[vertex1][i] !== vertex2) {\n                array.push(this.adjacencyList[vertex1][i])\n            }\n        }\n\n        let array2 = []\n        for(let i = 0; i < this.adjacencyList[vertex2]; i++){\n            if(this.adjacencyList[vertex2][i] !== vertex1) {\n                array2.push(this.adjacencyList[vertex2][i])\n            }\n        }\n\n        this.adjacencyList[vertex1] = array\n        this.adjacencyList[vertex2] = array2\n    }\n\n    removeVertex(vertex){\n        while(this.adjacencyList[vertex].length){\n            const adjacentVertex = this.adjacencyList[vertex].pop();\n            this.removeEdge(vertex, adjacentVertex);\n        }\n        delete this.adjacencyList[vertex]\n    }\n\n    depthFirstRecursive(start){\n        const result = [];\n        const visited = {};\n        const adjacencyList = this.adjacencyList;\n\n        (function dfs(vertex){\n            if(!vertex) return null;\n            visited[vertex] = true;\n            result.push(vertex);\n            adjacencyList[vertex].forEach(neighbor => {\n                if(!visited[neighbor]){\n                    return dfs(neighbor)\n                }\n            });\n        })(start);\n\n        return result;\n    }\n\n    depthFirstIterative(start){\n        const stack = [start];\n        const result = [];\n        const visited = {};\n        let currentVertex;\n\n        visited[start] = true;\n        while(stack.length){\n            currentVertex = stack.pop();\n            result.push(currentVertex);\n\n            this.adjacencyList[currentVertex].forEach(neighbor => {\n               if(!visited[neighbor]){\n                   visited[neighbor] = true;\n                   stack.push(neighbor)\n               } \n            });\n        }\n        return result;\n    }\n}","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/BinaryTree.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/HashMapAnimations.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Dijkstras.js",["136","137","138"],"import React, { useEffect, useState } from 'react'\nimport { PriorityQueue } from '../helperMethods/DataStructureClasses'\nimport NodeRow from '../components/NodeRow';\n\nclass WeightedGraph {\n    constructor() {\n        this.adjacencyList = {};\n    }\n    addVertex(vertex){\n        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];\n    }\n    addEdge(vertex1,vertex2, weight){\n        this.adjacencyList[vertex1].push({node: vertex2, weight});\n        this.adjacencyList[vertex2].push({node: vertex1, weight});\n    }\n    Dijkstra(start, finish){\n        const nodes = new PriorityQueue();\n        const distances = {};\n        const previous = {};\n        let path = [] //to return at end\n        let smallest;\n        //build up initial state\n        for(let vertex in this.adjacencyList){\n            if(vertex === start){\n                distances[vertex] = 0;\n                nodes.enqueue(vertex, 0);\n            } else {\n                distances[vertex] = Infinity;\n                nodes.enqueue(vertex, Infinity);\n            }\n            previous[vertex] = null;\n        }\n        // as long as there is something to visit\n        while(nodes.values.length){\n            smallest = nodes.dequeue().val;\n            if(smallest === finish){\n                //WE ARE DONE\n                //BUILD UP PATH TO RETURN AT END\n                while(previous[smallest]){\n                    path.push(smallest);\n                    smallest = previous[smallest];\n                }\n                break;\n            } \n            if(smallest || distances[smallest] !== Infinity){\n                for(let neighbor in this.adjacencyList[smallest]){\n                    //find neighboring node\n                    let nextNode = this.adjacencyList[smallest][neighbor];\n                    //calculate new distance to neighboring node\n                    let candidate = distances[smallest] + nextNode.weight;\n                    let nextNeighbor = nextNode.node;\n                    if(candidate < distances[nextNeighbor]){\n                        //updating new smallest distance to neighbor\n                        distances[nextNeighbor] = candidate;\n                        //updating previous - How we got to neighbor\n                        previous[nextNeighbor] = smallest;\n                        //enqueue in priority queue with new priority\n                        nodes.enqueue(nextNeighbor, candidate);\n                    }\n                }\n            }\n        }\n        return path.concat(smallest).reverse();     \n    }\n}\n\nconst Dijkstras = () => {\n\n    const [mousePressed, setMousePressed] = useState(false)\n    const [nodes, setNodes] = useState([])\n    const [graph, setGraph] = useState(new WeightedGraph())\n    const [start, setStart] = useState({row: 15, col: 15})\n    const [end, setEnd] = useState({row: 15, col: 50})\n\n    const handleCreateGraph = () => {\n        const container = document.getElementById(\"dijkstras-grid\")\n        const coordinates = container.getBoundingClientRect()\n        let row = 0\n        let col = 0\n        let lastRowY = 25\n        const array = []\n        while(lastRowY < coordinates.bottom){\n            let lastNodeX = 25\n            const innerArray = []\n            \n            while(lastNodeX < coordinates.right){\n                const node = {row: row, col: col}\n                graph.addVertex(node)\n                graph.addEdge(node, {row: row, col: col - 1}, 1)\n                if(row > 0){\n                    graph.addEdge(node, {row: row -1, col: col}, 1)\n                }\n                innerArray.push(node)\n                lastNodeX += 25\n                col++\n            }\n\n            array.push(innerArray)\n            row++\n            col = 0\n            lastRowY += 31\n        }\n\n        setNodes(array)\n    }\n\n    const handleMouseDown = () => {\n        // debugger\n        setMousePressed(true)\n    }\n\n    const handleMouseUp = () => {\n        // debugger\n        setMousePressed(false)\n    }\n\n    const handleSetStart = (row = 15, col =15) => {\n        const oldNode = document.getElementById(`node-${start.row}-${start.col}`)\n        oldNode.style.backgroundColor = \"white\"\n        const node = document.getElementById(`node-${row}-${col}`)\n        node.style.backgroundColor = \"lightgreen\"\n        setStart({row: row, col: col})\n    }\n\n    const handleSetEnd = (row = 15, col = 50) => {\n        const oldNode = document.getElementById(`node-${end.row}-${end.col}`)\n        oldNode.style.backgroundColor = \"white\"\n        const node = document.getElementById(`node-${row}-${col}`)\n        node.style.backgroundColor = \"magenta\"\n\n        setEnd({row: row, col: col})\n    }\n\n    const handleDijkstras = () => {\n        \n    }\n\n    useEffect(async () => {\n        await handleCreateGraph()\n        handleSetStart()\n        handleSetEnd()\n    }, [])\n\n    return (\n        <div id=\"dijkstras-container\" className=\"w-full h-full\" onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\n            <div id=\"dijkstras-grid\" className=\"w-5/6 h-5/6 m-12 ml-24 border-2 border-gray-300 p-2\">\n                {nodes.map(row => {\n                    return <NodeRow values={row} row={row[0].row} mousePressed={mousePressed} />\n                })}\n            </div>\n            <div className=\"flex flex-row items-center\">\n                <form className=\"m-6 border-2\" onSubmit={(event) => {\n                    event.preventDefault();\n                    debugger\n                    handleSetStart(event.target[0].value, event.target[1].value)}}>\n                    <label className=\"ml-2\">Row: </label>\n                    <input className=\"ml-2\" type=\"number\" placeholder=\"15\" />\n                    <label className=\"ml-2\">Col: </label>\n                    <input className=\"ml-2\" type=\"number\" placeholder=\"15\" />\n                    <button className=\"border-2 bg-gray-300 ml-2 hover:bg-gray-100 rounded\" type=\"submit\">\n                        Set Start Point\n                    </button>\n                </form>\n                <form className=\"m-6 border-2\" onSubmit={(event) => {\n                    event.preventDefault();\n                    handleSetEnd(event.target[0].value, event.target[1].value)}}>\n                    <label className=\"ml-2\">Row: </label>\n                    <input className=\"ml-2\" type=\"number\" placeholder=\"15\" />\n                    <label className=\"ml-2\">Col: </label>\n                    <input className=\"ml-2\" type=\"number\" placeholder=\"50\" />\n                    <button className=\"border-2 bg-gray-300 ml-2 hover:bg-gray-100 rounded\" type=\"submit\">\n                        Set End Point\n                    </button>\n                </form>\n                <button className=\"ml-2 h-1/2 border-2 bg-gray-300 hover:bg-gray-100 rounded\" onClick={handleDijkstras}>\n                    Start\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Dijkstras\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/BinarySearchAnimations.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/node.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Node.js",["139","140","141","142"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/NodeRow.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"143","replacedBy":"149"},{"ruleId":"145","replacedBy":"150"},{"ruleId":"143","replacedBy":"151"},{"ruleId":"145","replacedBy":"152"},{"ruleId":"143","replacedBy":"153"},{"ruleId":"145","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":72,"column":18,"nodeType":"157","messageId":"158","endLine":72,"endColumn":25},{"ruleId":"159","severity":1,"message":"160","line":250,"column":8,"nodeType":"161","endLine":250,"endColumn":10,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":42,"column":19,"nodeType":"165","messageId":"166","endLine":42,"endColumn":21},{"ruleId":"143","replacedBy":"167"},{"ruleId":"145","replacedBy":"168"},{"ruleId":"159","severity":1,"message":"169","line":60,"column":8,"nodeType":"161","endLine":60,"endColumn":10,"suggestions":"170"},{"ruleId":"143","replacedBy":"171"},{"ruleId":"145","replacedBy":"172"},{"ruleId":"155","severity":1,"message":"173","line":3,"column":27,"nodeType":"157","messageId":"158","endLine":3,"endColumn":33},{"ruleId":"155","severity":1,"message":"174","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":36},{"ruleId":"155","severity":1,"message":"175","line":82,"column":18,"nodeType":"157","messageId":"158","endLine":82,"endColumn":25},{"ruleId":"155","severity":1,"message":"176","line":83,"column":12,"nodeType":"157","messageId":"158","endLine":83,"endColumn":24},{"ruleId":"143","replacedBy":"177"},{"ruleId":"145","replacedBy":"178"},{"ruleId":"155","severity":1,"message":"179","line":100,"column":7,"nodeType":"157","messageId":"158","endLine":100,"endColumn":12},{"ruleId":"155","severity":1,"message":"180","line":71,"column":19,"nodeType":"157","messageId":"158","endLine":71,"endColumn":27},{"ruleId":"159","severity":1,"message":"181","line":138,"column":15,"nodeType":"182","endLine":142,"endColumn":6},{"ruleId":"159","severity":1,"message":"183","line":142,"column":8,"nodeType":"161","endLine":142,"endColumn":10,"suggestions":"184"},{"ruleId":"155","severity":1,"message":"185","line":9,"column":12,"nodeType":"157","messageId":"158","endLine":9,"endColumn":17},{"ruleId":"155","severity":1,"message":"186","line":9,"column":19,"nodeType":"157","messageId":"158","endLine":9,"endColumn":27},{"ruleId":"155","severity":1,"message":"187","line":10,"column":12,"nodeType":"157","messageId":"158","endLine":10,"endColumn":15},{"ruleId":"155","severity":1,"message":"188","line":10,"column":17,"nodeType":"157","messageId":"158","endLine":10,"endColumn":23},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],["189"],["190"],["189"],["190"],["189"],["190"],["189"],["190"],"no-unused-vars","'setList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'list'. Either include it or remove the dependency array.","ArrayExpression",["191"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["189"],["190"],"React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.",["192"],["189"],["190"],"'Router' is defined but never used.","'useEffect' is defined but never used.","'setHash' is assigned a value but never used.","'currentColor' is assigned a value but never used.",["189"],["190"],"'Graph' is defined but never used.","'setGraph' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'handleCreateGraph', 'handleSetEnd', and 'handleSetStart'. Either include them or remove the dependency array.",["193"],"'start' is assigned a value but never used.","'setStart' is assigned a value but never used.","'end' is assigned a value but never used.","'setEnd' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [list]",{"range":"200","text":"201"},"Update the dependencies array to be: [resetArray]",{"range":"202","text":"203"},"Update the dependencies array to be: [handleCreateGraph, handleSetEnd, handleSetStart]",{"range":"204","text":"205"},[7519,7521],"[list]",[1944,1946],"[resetArray]",[4842,4844],"[handleCreateGraph, handleSetEnd, handleSetStart]"]